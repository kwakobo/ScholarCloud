[{"title":"Domain and value checking of web application invocation arguments","authors":"William G. J. Halfond","article":"http:\/\/dl.acm.org\/ft_gateway.cfm?id=2190121&ftid=1209930&dwn=1","bibtex":"http:\/\/dl.acm.org\/downformats.cfm?id=2190121&amp;parent_id=&amp;expformat=bibtex&amp;CFID=919380918&CFTOKEN=18975973","text":"Domain and Value Checking of Web ApplicationInvocation ArgumentsWilliam GJ HalfondUniversity of Southern CaliforniaLos Angeles California USAEmail halfondusceduAbstractInvocations are widely used by many web applications but have been found to be a common source oferrors This paper presents a new technique that can staticallyverify that an invocations set of argument names types andrequest method match the constraints of a target interface Anempirical evaluation of the technique shows that it is successfulat identifying previously unknown errors in web applicationsI INTRODUCTIONComponents of modern web applications communicateamong themselves extensively to generate customized andintegrated content This communication is done by sendingHyperText Transfer Protocol HTTP based invocations thatcontain arguments and data Invocations are widely used toimplement web forms hyperlinks and to send AJAXbaseddata to servers Errors in invocations are one of the mostcommon errors made by web application developers  Inearly simple web applications web crawlers could easilyidentify these types of errors However modern web applications dynamically generate HTML pages Web crawlers cannotprovide any guarantees that they will visit all of the pagesgenerated by an application and could therefore miss errorsMore recent techniques propose analyses for estimating theHTML pages generated by an application and then check theseusing an HTML validator   However these approachescan only check for syntactic correctness of an invocation anddo not check that the invocation matches the targets interfacePrevious work by the author  uses static analysis basedtechniques to verify the correctness of invocations but canonly catch errors in which the set of names of an interface andinvocation do not match More subtle but equally impactfulerrors related to the value of the arguments in an invocationare undetectable by prior workIn this paper the PI presents a new approach for checkingweb application invocations that addresses the limitationsof prior work The new approach introduces novel analysesthat allow it to check for additional correctness propertiesrelated to domain constraints on argument values and requestmethods To do this the approach analyzes the code of theweb application to identify substrings that will be used to formparts of the applications HTML output that define invocationsBased on the source of the substring the approach is able toinfer additional useful information about the invocation Thispaper also presents the results of an empirical evaluation thatmeasures the proposed approach in terms of its effectivenessat identifying invocation errors The results of the evaluationare positive and indicate that the proposed approach is ableto discover new errors in the subject applications with a lowfalse positive rateII BACKGROUND INFORMATION AND EXAMPLEWhen an HTTP message contains arguments to be consumed by the target component it is referred to as aninvocation Examples include web forms hyperlinks withparameters and direct API calls Arguments in an invocationare represented as namevalue pairs HTTP supports severalrequest methods for encoding and transferring arguments tothe target component but the two most widely used are GETand POSTComponents receive an invocations via an interface whichis defined as the set of arguments accessed along a path ofexecution in a web application Although all argument valuesare returned as strings the use of certain types of operationson the returned value can be used to infer domain constraintsFor example calling Integerparse on the value of anargument implies that the argument is expected to be of typeInteger The set of such domain constraints placed on aninterface along a specific path of execution is referred to asan interface domain constraint IDC An interface can havemore than one IDC if different operations are performed onits arguments along different pathsFigures  and  show the partial implementation of aweb application The servlet OrderStatus generates twodifferent invocations that are encoded as web forms The targetof these invocations is servlet ProcessOrder which isshown in Figure In the example web application there are three invocationrelated errors The first error is that one of the values specifiedfor the task hidden field at line  of OrderStatusdoes not match the value checked for at lines  or  ofProcessOrder This error causes a silent failure and theorder is not submitted The second error occurs if the userspecifies an alternate shipping address This causes a numberformat exception at line  of ProcessOrder since it isassumed that all the options are represented by numbers eventhough line  of OrderStatus provides an alphanumericvalue for the argument The third error is that there is no case c  IEEE ASE  Lawrence KS USAvoid serviceRequest req  printhtmlbodyhConfirm Orderh String oid  reqgetParamoid int quant  getQuantityoid printform methodPOST actionProcessOrder printinput typehidden value oid   nameoid printselect nameshipto printoption valueBilling Addroption printoption valueHome Addressoption printoption valueotherAltoption printselect printIf other input typetext nameother ifcanModifyoid  printpEnter new quantity p printinput typetext namequant value quant   printinput typehidden valuemodify  nametask printinput typesubmit valueChange  Quantity  else  printinput typehidden valueconfirm  nametask printinput typesubmit valuePurchase  printformbodyhtmlFig  Invoking component OrderStatusvoid doPostRequest req  String oid  reqgetParamoid String task  reqgetParamtask int shipOption IntegerparsereqgetParamshipto String addressreqgetParamother switch shipOption  case  address  getHomeAddressoid break case  saveOtherAddressoid address break  iftaskequalspurchase  submitOrderoid address  iftaskequalsmodify  int quant  IntegerparsereqgetParamquant modifyOrderoid quant submitOrderoid address Fig  Target component ProcessOrderthat can handle when the billing address option is chosen atline  of OrderStatusIII PROPOSED APPROACHThe goal of the proposed approach is to statically checkweb application invocations for correctness and detect errorssuch as those illustrated in Section II There are three basicsteps to the approach A identify generated invocations Bcompute interfaces and domain constraints and C check thateach invocation matches an interfaceA Identify Invocation Related InformationThe goal of this step is to identify invocation relatedinformation in each component of the web application Theinformation to be identified is a the set of argument namesthat will be included in the invocation b potential valuesfor each argument c domain information for each argumentand d the request method of the invocation The generalGenn  if n is method entryn if n generates outputn if n is a callsiteand targetn has a summary otherwiseInn pprednOutpOutn  pi  Inn p  appendi Gennfragmentsm ps  OutexitNodemYnsresolvenFig  Dataflow equations for HTML page extractionprocess of this step is that the approach computes the possibleHTML pages that each component can generate During thisprocess domain and value information is identified by trackingthe source of each substring in the computed set of pagesFinally the computed pages and substring source informationare combined to identify the invocation information Compute Possible HTML Pages The approach analyzesa web application to compute the HTML pages each component can generate Prior work by the author  is extendedas described in Sections IIIA and IIIA to compute thesepages in such a way as to preserve domain information abouteach invocation For space considerations the algorithms thatserve as the starting point for the approach are summarized inFigure  The approach computes the fixed point solution tothe dataflow equations and at the end of the computation thefragment associated with the root method of each componentcontains the set of possible HTML pages that could begenerated by executing the component Identify Domain and Value Information The approachidentifies domain and value information for each argument inan invocation The key insight for this part of the approachis that the source of the substrings used to define invocationsin an HTML page can provide useful information about thedomain and possible values of each argument For exampleif a substring used to define the value of an invocationoriginates from a call to StringBuilderappendintthis indicates that the arguments domain is of type integer Toidentify this type of information strings from certain types ofsources are identified and annotated using a process similarto static tainting Then the strings and their correspondingannotations are tracked as the approach computes the fixedpoint solution to the equations in Figure The mechanism for identifying and tracking string sourcesstarts with the resolve function which analyzes a node nin an application and computes a conservative approximationof the string values that could be generated at that node Thegeneral intuition is that when the resolve function analyzesa string source that can indicate domain or value informationa special domain and value DV function is used to completethe analysis The DV function returns a finite state automatonFSA defined as the quintuple  S s  F whose acceptedlanguage is the possible values that could be generated bythe expression In addition the DV function also defines twofunctions D  S    T that maps each transition to adomain type where T is a basic type of character integerfloat long double or string and V  S       thatmaps each transition to a symbol in  or a special symbol that denotes any value D is used to track the inferred domainof a substring and V is used to track possible values A DVfunction is defined for each general type of string source Forthe purpose of the description of the DV functions below erefers to any transition S   defined by  and the functionLe returns the symbol associated with the transition eFunctions that return a string variable Substrings originating from these types of functions can have any value anda domain of string This is represented as V e   andDe  stringString constants The string constant provides a value forthe argument and a domain of string This is represented asV e  Le and De  stringMember of a collection For example a string variabledefined by a specific member of a list of strings More broadlyof the form v  collectionhTix where v is the stringvariable collection contains objects of type T and x denotesthe index of the collection that defines v In this case adomain can be provided based on the type of object containedin the collection This is represented as De  T andV e  collectionx if the value is resolvable or V e  otherwiseConversion of a basic type to a string For example IntegertoString More broadly any functionconvertX  S where X is a basic type and S is a stringtype This operation implies that the string should be a stringrepresentation of type X This is represented as De  Xand V e   if X is defined by a variable or V e  LeotherwiseAppend a basic type to a string For example acall to StringBuilderappendint More broadlyappendS X  Swhere S is a string type X is a basictype and Sis the string representation of the concatenationof the two arguments In this case the domain of the substringthat was appended to S should be X This is represented asDeX  X V eX   if X is defined by a variable orV eX  LeX otherwise The subscripts denote the subsetof transitions defined by the FSA of the string representationof X Combining Information The final part of identifyinginvocation related information is to combine the informationidentified by computing the HTML pages and the domain andvalue tracking The key insight for this step is that substringsof the HTML pages that syntactically define an invocationsvalue will also have annotations from the DV functions Toidentify this information a custom parser is used to parse eachof the computed HTML pages and recognize HTML tags whilemaintaining and recording any annotationsExample Using the equations listed in Figure  theOutexitNode of servlet OrderStatus is equal to       The analysis performsresolve on each of the nodes in each of the sets thatTABLE IINVOCATIONS GENERATED BY SERVLET ORDERSTATUS Arguments oid   task  modify shipto   other  quant INT  oid   task  modify shipto   other  quant INT  oid   task  modify shipto  other other  quant INT  oid   task  confirm shipto   other   oid   task  confirm shipto   other   oid   task  confirm shipto other other  comprise OutexitNode Nodes        and  involve constants so resolve returns the valuesof the constants and the domain information is any string Nodes  and  originate from special string sources Thevariable oid is defined by a function that returns strings andcan be of any value  and the variable quant is an appendof a basic type so it is marked as type int After computingthe resolve function for each of the nodes the final valueof fragmentsservice is comprised of two web pageswhich differ only in that one traverses the true branch at line and therefore includes an argument for quant and a differentvalue for taskThe approach then parses the HTML to identify invocationsBy examining the annotations associated with the substringthat defines each arguments value the value for argumentsoid and quant are identified The select tag has threedifferent options that can each supply a different value Sothree copies are made of each of the two web form basedinvocations Each copy is assigned one of the three possiblevalues for the shipto argument The final result is the identification of six invocations originating from OrderStatusThese are shown in Table I Each tuple in the table lists thename domain type and values of the identified argumentB Identify InterfacesThis step of the proposed approach identifies interfaceinformation for each component of a web application Theproposed approach extends prior work in interface analysis to also identify the HTTP request method for each interface The specific mechanism for specifying HTTP requestmethods depends on the framework In the Java EnterpriseEdition JEE framework the name of the entry method firstaccessed specifies its expected request method For examplethe doPost or doGet method indicates that the POST orGET request methods respectively will be used to decodearguments The proposed approach builds a call graph of thecomponent and marks all methods that are reachable from thespecially named root methods as having the request methodof the originating methodExample ProcessOrder can accept two interfacesdue to the branch taken at line   oid task shiptoother and  oid task shipto other quant From theimplementation of ProcessOrder it is possible to inferdomain information for some of the parameters From thisinformation the first interface is determined to have anTABLE IIERRORS AND FALSE POSITIVES REPORTED BY WAIVE Subject  Invk Confirmed Errors False PositivesRM N IDC RM N IDCBookstore       Daffodil       Filelister       JWMA       Total       IDC of intshiptoshiptoshiptotaskpurchaseand the second interface has an IDC ofintshiptoshiptoshiptotaskmodifyintquantUnless otherwise specified the domain of a parameter is astring Lastly by traversing the call graph of ProcessOrderall parameters and therefore all interfaces are identifiedas having originated from a method that expects a POSTrequestC Verify InvocationsThe third step of the approach checks each invocation toensure that it matches an interface of the invocations targetAn invocation matches an interface if the following threeconditions hold  the request method of the invocation isequal to the request method of the interface  the set ofthe interfaces parameter names and the invocations argumentnames are equal and  the domains and values of the invocation satisfy an IDC of the interface For the third conditiondomain and value constraints are checked The domain of anargument is considered to match the domain of a parameterif both are of the same type or if the value of the argumentcan be successfully converted to the corresponding parametersdomain type For example if the parameter domain constraintis Integer and the argument value is  then the constraintwould be satisfiedExample Consider the interfaces identified in Section IIIBand the invocations shown in Table I Each of the six invocations is checked to see if it matches either of the two interfacesOnly invocation  represents a correct invocation and the restwill be identified as errorsIV EVALUATIONThe evaluation measures the precision of the reported results The proposed approach was implemented as a prototype tool WAIVE The subjects used in the evaluation arefour Java Enterprise Edition JEE based web applicationsBookstore Daffodil Filelister and JWMA These applicationsrange in size from  to  lines of code All of theapplications are available as open source and are implementedusing a mix of static HTML JavaScript Java servlets andregular Java codeTo address the research questions WAIVE was run on thefour applications For each application the reported invocationerrors were inspected Table II shows the results of inspectingthe reported invocations Each invocation error was classifiedas either a confirmed error or a false positive Invocationsin both classifications were also further classified based onwhether the error reported was due to a violation of oneof the correctness properties explained in Section IIIC theinvocation did not match an interface because of an incorrectlyspecified request method RM the argument names did notmatch the parameter names of any interface of the target Nand the value and domain information of an invocation didnot match the interface domain constraint IDC The tablealso reports the total number of invocations identified for eachapplication  InvkAs the results in Table II show WAIVE identified  erroneous invocations and had  false positives Prior approachescan only detect errors related to names so the comparabletotal of errors for WAIVE was  erroneous invocationsand  false positives These results indicate that the newdomain information checks resulted in the discovery of additional errors and  false positive Overall the results arevery encouraging The approach identified  new errors thathad been previously undetectable while only producing oneadditional false positiveV CONCLUSIONSThis paper presented a technique for statically checkingthe correctness of web application invocations The techniquehas three main steps  identify the interfaces of a webapplication  compute the invocations that can be generatedby each component of the web application and  checkto ensure that each invocation matches an interface of thetarget component An invocation matches an interface when its HTTP request method matches that of the interface both reference the same set of named arguments and the value of each argument matches the domain constraints ofthe corresponding parameter The approach was implementedand evaluated against several subject web applications Theresults indicate that the approach is able to find additionalerrors related to the domain constraints of the interfaces whilehaving a low false positive rateREFERENCES S Elbaum KR Chilakamarri B Gopal and G Rothermel HelpingEndUsers Engineer Dependable Web Applications in Proceedingsof the International Symposium of Software Reliability EngineeringNovember  pp  S Artzi A Kiezun J Dolby F Tip D Dig A Paradkar and M DErnst Finding Bugs in Dynamic Web Applications in Proceedings ofthe International Symposium on Software Testing and Analysis July  Y Minamide Static Approximation of Dynamically Generated WebPages in Proceedings of the International World Wide Web ConferenceMay  pp  W G Halfond and A Orso Automated Identification of ParameterMismatches in Web Applications in Proceedings of the Symposium onthe Foundations of Software Engineering November  W G Halfond and A Orso Improving Test Case Generation for WebApplications Using Automated Interface Discovery in Proceedings ofthe Symposium on the Foundations of Software Engineering September"}]