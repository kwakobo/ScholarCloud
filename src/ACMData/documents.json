[{"title":"Deployment experience with differentiated services","authors":"Bruce Davie","article":"http:\/\/dl.acm.org\/ft_gateway.cfm?id=944598&ftid=232772&dwn=1","bibtex":"http:\/\/dl.acm.org\/downformats.cfm?id=944598&amp;parent_id=&amp;expformat=bibtex&amp;CFID=745371419&CFTOKEN=41684288","text":"ABSTRACTWhile ubiquitous QoS mechanisms are not yet deployedwidely across the public Internet, the Differentiated Services(diffserv) architecture has in fact proven itself to be a goodmatch for the technical needs of many service providers. Inthis paper we consider the state of deployment of QoS mecha-nisms in large service provider IP networks (many of whichhappen to be offering VPN or VoIP services rather than public\n     Permission to make digital or hard copies of all orpart of this work for personal or classroom use isgranted without fee provided that copies are notmade or distributed for profit or commercial advan-\nDeployment Experience with Differentiated ServicesBruce DavieCisco Systems, Inc.1414 Massachusetts Ave.Boxborough, MA 01719, USAbsd@cisco.com\nsurely application performance is what really matters. If all net-works delivered the low loss, low jitter, and low delay that themost stringent applications require, and used no QoS mecha-nisms to do so, it is hard to think that would not be a satisfac-tory result, at least for end users. However, our main concern inthis paper is with the deployment of mechanisms, as we seek toaddress the question of whether the last decade of research,development and standardization of mechanisms has beenworth the effort.2.  SERVICE PROVIDER QOS DEPLOYMENT2.1  Available Diffserv mechanismsIt is worth noting that diffserv capabilities are so widely avail-able on middle- to high-end routing platforms that almost anyservice provider who chose to implement diffserv in his net-work could certainly do so, at least as far as router capabilitiesare concerned. The major router vendors have implemented EF,AF, and class selector (CS) PHBs, as well as a range of \u0093edge\u0094functions such as sophisticated classification functions, tokenbucket policers, and re-marking functions. Thus the issue is notone of deploying appropriate hardware but rather of investingthe effort to configure, provision and manage diffserv capabili-ties in the providers\u0092 networks.2.2  ISP EdgeWhile deployment of QoS mechanisms in the backbones ofISPs remains rare, diffserv mechanisms are increasingly beingenabled on the \u0093edge\u0094, i.e. on the access links that connect cus-tomers to the ISP. This is typically not a capability that is avail-able to consumers, but for large corporate customers it providesa tool to manage the usage of access links. There is a strong financial incentive for a customer to buyaccess links that are appropriately sized rather than over-dimen-sioned. Assuming that a customer has some traffic that is moreimportant or more sensitive to loss or latency than other traffic,providing the customer with diffserv mechanisms on the accesslink could enable him to obtain the desired QoS for those moresensitive classes without needing to buy an over-dimensionedaccess link that would deliver low loss and delay to all traffic.A clear problem arises with this model. Assume that the accesslink connects a customer-edge (CE) router and a provider edge(PE) router, as shown in Figure1. Clearly the customer is moreeasily able to control the diffserv marking, and thus the behav-ior, of traffic leaving his site (i.e. on the outbound direction ofhis access link) than that of traffic entering his site. He can, forexample, mark his own latency-sensitive traffic as EF, but hecan\u0092t necessarily expect that traffic that he regards as latencysensitive will be marked as EF before it reaches the provider\u0092sedge router on its way into his site. One way in which the ser-vice provider can help out in this case is to use the sourceaddress of the packets as a criterion in determining how thepackets should be treated when being sent down the access linkto the customer. For example, if the customer connects to thesame provider at multiple locations, he could ask the providerto implement a policy in the PE that respects the DSCP valuefor packets that are sent to this customer if and only if they orig-inated at addresses that are within other sites of the same cus-tomer. FIGURE 1. Applying diffserv to an access link2.3  \u0093Layer 3\u0094 VPN providersThe discussion of the previous section helps to illustrate whymuch of the deployment of diffserv today is found in the net-works of providers who offer \u0093Layer 3\u0094 VPN services. Theseservices offer a virtually private IP network interconnecting thesites of each customer, and are often based on the MPLS\/BGPVPN model [12]. Some examples of MPLS\/BGP VPN servicesthat offer QoS based on diffserv are discussed in [3][4][7][14]Because these services connect many sites of a single customerto the network of a single VPN service provider, the problemsof offering QoS at the edge of an ISP are largely overcome. Thecustomer can mark his latency-sensitive traffic as EF, his mis-sion critical data with some other DSCP, and so on, and the pro-vider can then honor those markings at the egress edge of thePE routers that connect to other sites of the same customer. Note that the key difference between the VPN scenario and theISP scenario is that a single VPN customer is likely to connectto a single VPN service provider at a relatively large number ofpoints, and that the majority of traffic crossing any customer-provider link is likely to be from other customer sites of thesame VPN. This makes it possible for the customer to designand enforce his own QoS policies (e.g. packets are only markedEF if they originated at an IP phone) while all the service pro-vider has to do is to honor the EF marking on packets when for-warding them from the PE to the CE (by providing EF behaviorto those packets in the customer-facing interfaces of the PE).Once the customer marking of traffic and service provider treat-ment of traffic is in place, it is a relatively small step for theVPN provider to start providing diffserv treatment of the cus-tomers\u0092 packets in the provider\u0092s core. The major effort here isin configuring the appropriate PHBs in the core, and typicallyin configuring policers at the PE ingress interfaces. The latterstep is needed to ensure that customers cannot send arbitraryamounts of non-best-effort traffic. Customers in this environ-ment are generally allowed to send up to some token-bucket-limited amount of traffic in each diffserv class.CustomerEdge (CE)Provider Edge (PE)Provider CoreAccess LinkCE applies diffservtreatment to packetsleaving sitePE applies diffservtreatment to packetsdestined for CE\nAs a side note, since these layer 3 VPN services typically arebased on RFC 2547, the packets in the core are MPLS labelled,and use the procedures defined in RFC 3270[9] to deliver diff-serv capabilities in the provider core. From the customer\u0092s pointof view, there is no difference between an MPLS and a non-MPLS network in terms of its diffserv capabilities - MPLS isused only to provide the constrained connectivity required bythe VPN service.It is worth noting that offering this sort of service also requiresthe customer and provider to negotiate some sort of \u0093servicelevel specification\u0094 (SLS) that defines how much traffic thecustomer may send in each class and what the provider com-mits to deliver (in terms of delay, loss etc.) for each class. Suchnegotiations are commonplace in layer 2 VPN service offerings(such as Frame Relay). Since many of the customers for layer 3VPN services are migrating from layer 2 services, this mayexplain why it has been straightforward, and in fact necessary,to include QoS issues in negotiation of the SLAs for these ser-vices. The key point that we wish to stress in this section is that diff-serv deployment seems to have succeeded in the VPN contextbecause of some important differences between this environ-ment and the public Internet. The aspects of the VPN environ-ment that seem to have helped diffserv deployment are:\u0095Each customer connects to the provider in many locations, and thus receives significant benefits from diffserv even when it is applied only to traffic that originates in his own sites and only on the access links\u0095VPN services are overwhelmingly offered by a single pro-vider, so issues of inter-provider agreements do not arise\u0095VPN customers are frequently demanding with regard to QoS because of both their prior experience (e.g. leased lines, Frame Relay) and because of the mission critical nature of their traffic.We will revisit these points when we consider the possiblefuture deployment of diffserv in the public internet.This is not to say that successful deployment of QoS becomes atrivial matter in the VPN environment. For example, there isstill the issue of how the corporate customer enforces consistentpolicies, e.g. to ensure that only those applications that needlow latency service mark packets with EF. There is also theissue of appropriate dimensioning of the access links to handlethe possibility that traffic may be sent to one site from all othersites at once, and that EF traffic, for example, may single-hand-edly overload the link, making diffserv mechanisms quite inef-fective. However, it is clear that the barriers to deployment are,at present, low enough in the VPN context for significantdeployment to have taken place.2.4  Public VOIP providersAnother area where diffserv deployment has met with somesuccess is in public voice telephony services run over IP net-works. Certainly there have been some IP telephony providerswho have simply obtained Internet access for their VOIP gate-ways from large ISPs running lightly loaded best-effort net-works, and the typically low latencies across the networks aresufficient to provide good quality voice services. This is some-what analogous to the early DARTnet experiences that fed intoearly work on Integrated Services[5] - a lightly loaded networkprovides essentially the same service as a lightly loaded priorityqueue, which can meet the needs of latency- or loss-sensitiveapplications, provided the utilization of the network remainsconsistently low. As an example of a network that could pro-vide this sort of behavior, the reported metrics from Sprint\u0092s IPbackbone for the first quarter of 2003 indicate 0.00% packetloss and delay of less than 50ms in the US portion of their net-work [13]. It is not clear how many providers of public VOIP services areusing diffserv rather than just over-provisioned networks. Tele-com Italia\u0092s announcement of their VOIP offering [15] is aninteresting case in terms of both size and visibility - much of thepublic phone traffic in Italy is simply being moved onto their IPbackbone. The press release makes it reasonably clear that theyare using diffserv mechanisms to protect the voice traffic fromdata. (Once again, RFC3270 mechanisms are used to providediffserv capabilities while also using MPLS for other things,such as traffic engineering.)Note that the VOIP scenario, like the VPN case, again sidestepssome of the deployment issues of QoS for public Internet appli-cations. The provider typically owns all the VOIP gateways andcan thus enforce a consistent policy (gateways get to mark traf-fic EF, nothing else does). And the traffic can be kept on thenetwork of a single provider, avoiding any issues of inter-pro-vider agreements.2.5  Enterprise Diffserv DeploymentWhile the focus of this paper is on service provider QoS, wenote that there has been a moderate amount of diffserv deploy-ment in enterprise networks. One primary driver for this isVOIP, with the IP phones and VOIP gateways marking all traf-fic that they source as EF, and the routers and switches beingconfigured to treat such traffic with the appropriate PHB. Thisis by no means the only use of diffserv in enterprises; it is alsocommon to use one of the AF or CS PHBs to assure that certainmission critical data applications get access to some minimumamount of bandwidth no matter what other applications aredoing.As in a VPN environment, enterprise deployment is made eas-ier by the fact that a single administrative entity can enforcecommon policies to make QoS effective, e.g. by ensuring thatonly VOIP endpoints mark packets as EF.Increased deployment of diffserv by enterprises may in factprovide some impetus towards service provider deployment, forat least two reasons:\u0095 if either end users or network administrators go to the trou-ble to set DSCPs to different values to obtain different lev-els of QoS inside the enterprise network, then clearly that eases the task of providing different QoS treatment in the service provider network as well;\n\u0095users and administrators who are able to obtain a range of different QoS levels inside a single campus are more likely to want to extend that differentiation beyond the campus.QoS is typically considered to be an end-to-end phenomenon: ifone link in the end-to-end path fails to provide it, then the appli-cation doesn\u0092t receive the QoS it needs. Thus enterprise QoSdeployment is important when viewing QoS from the applica-tion perspective. However, for the remainder of this paper wefocus on the service provider portion of the problem, which iswhere we observe the greatest barriers to deployment of QoS.3.  FACTORS INHIBITING QOS DEPLOYMENTIn this section we list some of the factors that have inhibited thedeployment of QoS mechanisms. Foremost among them mustbe the alleviation of congestion in many large service providernetworks during the rapid build-out of backbones that tookplace in the late 1990s and into 2000. There is simply no reasonto deploy any QoS mechanism if packets never experience sig-nificant queuing delay or loss. Many large ISPs today continueto run networks at such low utilization that queuing delay isnegligible and packet loss due to buffer overflow is almostunheard of. As long as this remains true, there is no point debat-ing the merits of different QoS mechanisms, as far as ISPs areconcerned. As noted above, however, the ISP edge is anotherstory; so too are certain peering points. It is also not true that allISPs have substantial excess capacity on all links, and we canspeculate about whether over-provisioning will continue to beacceptable in the future.There is no doubt that turning on QoS features carries somecosts for providers. Personnel need to be trained to configureQoS features correctly, and to troubleshoot incorrect configura-tions. QoS features need to be tested before deployment into thenetwork. There may also be some performance impact on rout-ers, particularly when performing the more complex \u0093edge\u0094functions such as microflow classification. All these factorsrepresent reasons for providers not to deploy QoS unless thereis are offsetting benefits.If QoS is deployed, there needs to be some negotiation of theSLS, which implies additional work for the provider. The pro-vider also needs to monitor the network at a finer lever of gran-ularity, e.g. to determine if the latency experienced by EF trafficmeets the goals specified in the SLS. If the SLS is written inmore stringent terms than would have been the case for a sim-ple best-effort service, than additional provisioning effort mayneed to be invested to ensure that those more stringent goalscan be met reliably.A factor that may be significantly hampering QoS deploymentis the differing goals of customers and providers when end-to-end QoS is considered. Large corporate customers would typi-cally like to be able to obtain end-to-end QoS without beinglocked into the services of a single provider; a provider, on theother hand, would often prefer to encourage his customers tobuy all their service from the one provider. Thus providers donot seem to have strong incentives to reach agreements withother providers to enable end-to-end QoS services. In such anenvironment, a provider who can say \u0093all packets will experi-ence minimal delay, jitter and loss\u0094 is arguably offering a moreattractive service than one who says \u0093I can assure low loss, jit-ter and delay for some of your traffic if you tell me which trafficit is (by marking) and if you buy this more complex, moreexpensive service\u0094. Another challenge for providers who wish to offer diffserv-based QoS to customers as part of their service is that there are,as yet, no well-defined services associated with diffserv. Thiswas in fact an explicit goal of the diffserv working group - todefine per-hop behaviors and an overall architecture but toleave service definition to the service providers. The reasoningwas that service providers should be free to define services sothat they could differentiate themselves from other providers ina competitive marketplace. However, it is interesting to com-pare this approach with Frame Relay, where the service defini-tion based on committed information rate (CIR) was uniformlyadopted by most providers of the service. Presumably providersfound other ways to differentiate themselves, such as reliability,price, or even the quality of the \u0093zero-CIR\u0094 service (i.e. thebest-effort service.) Certainly, the existence of some common,well-understood service definitions for diffserv networks wouldmake end-to-end services possible without complex multi-pro-vider agreements. It would potentially make the issue of negoti-ating the QoS-related aspects of an SLS more straightforward ifa customer was offered the same set of services from multipleproviders.Finally, as noted above, platform support of Diffserv is typi-cally not an issue for service providers. It may however be anissue in the CE devices (see Figure1), especially for very low-end users. 4.  FACTORS THAT MAY ENCOURAGE QOS DEPLOYMENTJust as excess backbone capacity has reduced interest indeployment of QoS mechanisms, clearly a subsiding of the\u0093bandwidth glut\u0094 would probably increase service providerinterest in the same mechanisms. The financial environmentnow is quite different from that which prevailed during the late1990s. The following piece of anecdotal evidence may be tell-ing: a large provider used a rule of thumb that it was time topurchase a new link from A-B whenever the utilization of thecurrent link from A-B reached 15%. This approach is appar-ently becoming less acceptable in a more cost-conscious era.While it is difficult to predict if or when bandwidth in the corewill cease to be abundant, clearly the increasing penetration ofbroadband access is one factor driving up utilization in the core. Another factor that is likely to inspire providers to deploy diff-serv mechanisms in the core is an increasing focus on highquality of service even during failure scenarios. Evidence ofthis focus is apparent in work on faster routing convergence(e.g. [1]) and other fast reroute techniques (e.g. [11]). It is obvi-ous that even if links are running at 15% or less when the net-work is completely healthy, then the load may rise far abovethat in the event of a single failure. A provider wishing to pro-vide a level of service that is appropriate for voice will there-fore have a strong incentive to mark and queue voice trafficseparately from data rather than run the network at such low\nutilization that even under failure conditions all links remainlightly loaded.Providers may wish to use diffserv mechanisms simply to iso-late one class of traffic from another. For example, TCP traffictends to be highly bursty, and TCP behaves well under conges-tion, in the sense that it backs off. Many applications that do notuse TCP (e.g. telephony) are both less bursty and less respon-sive to congestion. Thus, it is potentially good for both classesof traffic if they don\u0092t share a queue with the other. TCP trafficbenefits by not sharing a queue with non-responsive traffic, andvoice benefits by not sharing a queue with bursty traffic that islikely to fill the queue quickly and thus induce jitter. This argu-ment doesn\u0092t carry much weight as long as links are trulyunderloaded. However, one point to note is that a link that isloaded at 15% on average may still exhibit high queueingdelays for short periods, and that these may be long enough toimpact voice quality.It is reasonable to expect that, as providers gain experience withQoS mechanisms in a VPN environment, there may be a greaterwillingness to turn on QoS for non-VPN traffic, in those caseswhere the same provider offers both VPN and public Internetservice. At this point, the cost of training, configuration, andmonitoring has already been paid, and so the benefits ofenabling QoS mechanisms need not be so large to justify theincremental cost.Finally, we return to the examples of deployment discussed inSection2. What would it take to make ISP deployment of diff-serv catch up with deployment in VPNs and in VOIP networks?One factor would be strong customer demand for end-to-endQoS across providers. Another would be co-operation amongproviders to use Diffserv in common ways. This might be morelikely with providers who lack global presence, and who there-fore have an incentive to deliver QoS to customer sites that arenot directly connected to their own backbones. It seems likelythat well-defined services that can be offered over diffserv net-works might also help in getting inter-provider QoS off theground.5.  CONCLUSIONSThe deployment of diffserv in the public Internet has not pro-ceeded at the pace that might have been hoped for, and the abil-ity to obtain end-to-end QoS assurances across arbitrarysections of the Internet still seems some way off. However, thefact remains that diffserv isnow deployed in a large number ofservice provider networks and appears to be meeting a range ofneeds well. The biggest reason for lack of deployment of diff-serv appears to be excess capacity in the ISP backbones, whichcan hardly be interpreted as a negative statement about diffserv.If excess capacity existed everywhere in the Internet, and wassure to do so forever, it would clearly be time to give up on theidea of deploying any QoS mechanisms in the Internet. Whenwe consider the fact that the Internet includes expensive accesscircuits from customers to providers and peering points that arenot always well provisioned, it seems that that time has notarrived.In one of its primary goals - scalability - diffserv has beenextremely effective. The fact that so many providers haveturned on diffserv features in large networks, even if only forVPN or VOIP applications, indicates that the scalability hurdle,which is a high one, has been successfully cleared.The PHB definitions of diffserv also appear to have been veryeffective. They are all implemented in a wide range of productsand they are all in use in large provider networks today. This paper has not addressed the deployment of diffserv withincorporate (or \u0093enterprise\u0094) networks. However, the rising popu-larity of VOIP in large corporations has been a clear driver fordiffserv in those environments, where it appears to be workingwell.In most cases, the barriers to wider diffserv deployment arenon-technical. That of course does not mean that are unimpor-tant, nor does it mean that they are insoluble. There are alsoareas where further technical work may help overcome thebusiness issues. For example, a concerted effort to define stan-dard end-to-end services that could be deployed across multipleproviders using the existing diffserv mechanisms might providea useful tool to help ISPs deliver QoS to their customers in away that meets the customers\u0092 needs.Thus we conclude that diffserv is, on balance, a successful tech-nology. It has not turned out to be the QoS panacea that someproponents may have hoped for, and there is more work to bedone to see it widely deployed in the public Internet. However,we believe that it is an effective starting point for QoS in largeservice provider networks that is likely to see increasingdeployment in the future.AcknowledgementsI wish to thank Anna Charny for her review comments, and theanonymous workshop reviewers for their feedback. Thanks alsoto Clarence Filsfils for providing a great amount of informationon the deployment of diffserv-based SLAs by service providers,and to Amrit Hanspal and Azhar Sayeed for their help in find-ing diffserv deployment information.REFERENCES[1] Alaettinoglu, C., V. Jacobson, and H. Yu, Towards Millisec-ond IGP Convergence, in NANOG Meeting, Washington, DC, October 2000.[2] Blake, S. et al. An Architecture for Differentiated Service, RFC 2475, December 1998. [3] Cisco Systems, Inc. Bell Canada Customer Profile. http:\/\/www.cisco.com\/warp\/public\/732\/Tech\/mpls\/docs\/BellCanada_CP_0820.pdf[4] Cisco Systems, Inc. Infonet Customer Profile. http:\/\/www.cisco.com\/warp\/public\/732\/Tech\/mpls\/docs\/infonet_0723.pdf[5] Clark, D and S. Shenker, and L. Zhang, Supporting real-time applications in an integrated services packet network: architecture and mechanism, in SIGCOMM Symposium 1992, Baltimore, Maryland, August 1992, pp. 14-26[6] Davie, B. et al. An Expedited Forwarding PHB (Per-Hop Behavior), RFC3246, March 2002.\n[7] Equant. MPLS - the cornerstone of Equant's IP service port-folio. http:\/\/www.equant.com\/content\/xml\/connectonline_may03_mpls.xml[8] Heinanen, J. et al. Assured Forwarding PHB Group, RFC2597, June 1999.[9] Le Faucheur, F. et al. Multi-Protocol Label Switching (MPLS) Support of Differentiated Services, RFC3270, May 2002.[10] Nichols, K. et al. Definition of the Differentiated Services Field (DS Field) in the IPv4 and IPv6 Headers, RFC 2474, December 1998.[11] Pan, P. et al. Fast Reroute Extensions to RSVP-TE for LSP Tunnels, Work in Progress (Internet Draft), Feb. 2003.[12] Rosen, E and Y. Rekhter. BGP\/MPLS VPNs, RFC2547, March 1999.[13] Sprint. Network Overview: Metrics. http:\/\/www.sprint-biz.com\/about\/network_metrics.html[14] Telkamp, T. Traffic Characteristics and Network Planning. http:\/\/www.nanog.org\/mtg-0210\/telkamp.html[15] News release: Telecom Italia takes Europe's biggest step in Voice over IP (VoIP), October 2002, http:\/\/news-room.cisco.com\/dlls\/prod_100902.html\n"},{"title":"SIGCOMM: a view from the chair","authors":"Bruce Davie","article":"http:\/\/dl.acm.org\/ft_gateway.cfm?id=1629612&ftid=608078&dwn=1","bibtex":"http:\/\/dl.acm.org\/downformats.cfm?id=1629612&amp;parent_id=&amp;expformat=bibtex&amp;CFID=745371419&CFTOKEN=41684288","text":"whichisthrivingunderanenthusiasticeditorialboard,providesasigni&#2;cantnon-conferenceopportunityformembersofthecommu-nitytopublishbothtechnicalworkandopinionpieces;IhopethatmoreSIGCOMMmemberswillavailthemselvesofthischannel.IsuspectthatmanymembersofthecommunityarenotfullyawareofalltheactivitiesthatSIGCOMMsponsorsorcooperateswith.ThesetofSIGCOMM-sponsoredconferences\/workshopsnowincludes:CoNEXT,IMC,HotNets,ANCS(jointwithSIGARCHandIEEE),andSenSys(jointlysponsoredbysixSIGs).Wealsoco-operatewithquiteanumberofotherconferences,in-cludingNSDI,theLatinAmericaNetworkingConference,andsev-eralothers1.IwouldencouragemembersofthecommunitytobethinkingaboutwhatothereventstheSIGmightwanttosponsororco-operatewith.Weshouldn'tconsiderthecurrentlistassome-thingstaticorhandeddownfromonhigh.OneissuethatimmediatelycomestomindwhenIconsidermyvisionforSIGCOMMistherelationshipbetweenindustryand&#147;theresearchcommunity&#148;.Ihavespentvirtuallymyentirecareersome-wherenearthelinebetweenresearchandindustrialdevelopment,&#2;rstatBellcore(anindustrialresearchlab)and,forthelast13years,atCisco.Ciscohasnoresearchlabperse,butithasbeenpartofmyjobdescriptionfromdayonetoprovidealiaisonfunc-tionbetweenCiscoandtheexternalresearchcommunity.WhileSIGCOMMhascertainlyplayedapartinbuildingbridgesbetweenindustryandtheacademicresearchcommunity,Ibelievethereisanopportunitytodomorehere.Iwillsketchafewideasbelow,andhopetohearmoresuggestionsfromthecommunityinthecomingmonths.ThecurrentsetofworkshopsthatareattachedtothemainSIG-COMMconference,Ibelieve,arefunctioningquitewellatfacilitat-inggreaterexchangeofideasbetweentheindustrialandacademicresearchcommunities.Forexample,thePRESTOworkshophasmanagedtoattractconsiderableinterestfrombothgroups,bothbe-causeofthetechnicaltopicarea(programmable\/extensiblerouters)andbecauseofanexpliciteffortbytheworkshoporganizerstoin-volveindustrialplayers,e.g.,byinvitingthemtoparticipateaspan-elists.Iwouldliketoseegreaterinformation&#3;owinbothdirectionsbe-tweenindustryandacademia.Forexample,Iamoftenaskedques-tionsaboutthesortofresearchthatCiscoisinterestedin(where&#147;interestedin&#148;mightimplyaninterestinfunding,orincollabo-ration,orboth).Wemaintainawebsitethatpartiallyanswersthatquestion,butSIGCOMMmembersdon't&#2;ndoutaboutitunlesstheyaskme2.Presumablylotsofcompanieshavesimilarlistsorusefulsites&#151;surelySIGCOMMcouldgatherthatinformationandmakeitmoreaccessibletoacademicmembersofthecommunity.Andofcoursewebsitesonlygosofarasasourceofusefulin-formation.Perhapstherealsowouldbevalueinhavingaspecialsessionattheannualconferencetoenableindustrialplayerstodis-seminatethissortofinformationface-to-face.Whataboutinformation&#3;owintheotherdirection?Drawingonmyownexperienceagain,peopleinacademiaquiteoftencometomewithsomeideathattheyareworkingonandwanttoknowwhomtheycouldtalktoaboutitinsideCisco.Thisproblemis\n1Asanewchair,I'mlearningwhatallthesedifferentarrangementsmean;forexample,whenSIGCOMMsponsorsaconference,we're&#2;nanciallyresponsibleforit,andACMallowsitsnametobeusedintheconferencetitle,whereas&#147;inco-operation&#148;ismoreofastate-mentofsupportfromtheSIGforthetechnicaldirectionofthecon-ference.2I'mtryinghardnottomakethislooklikeaCiscoadvertisement,butIassumelotsofreaderswillwanttoknowwheretolook:http:\/\/www.cisco.com\/researchwillgetyouthere.inmyexperiencequitealothardertosolvethantheoppositedi-rection,inpartbecauseofthedif&#2;cultyof&#2;ndinganexpertonanygiventopicinsidealarge,distributedcompany.However,itisoftenpossibleto&#2;ndarelevantexpertafterafewhopsthroughmyinfor-malnetworkofcolleagues.Again,itseemsthatSIGCOMMcouldhelpalargersetofacademicresearchersmakethat&#2;rstcontactintoapotentiallyinterestedindustrialcompany,throughsomecombina-tionofmeetingsatconferencesandsupportofsuitablecommuni-cationmethods.Obviously,thesearepreliminaryideas,andIamhopingthatbyputtingthemdownonpaperIwillstimulateothersto&#3;eshthemout,ortoproposebetterones.2.1ConferenceIssuesMuchasIarguedabovethatSIGCOMMismorethanjustasetofconferences,Idon'twanttoneglectwhatisobviouslyaveryimportanttopictomostofus.Thereis,toputitmildly,alotofpas-sionaroundtheannualSIGCOMMconference,especiallyonthemattersofpaperselectionandPCcomposition.Idon'twanttousethiscolumntostiruptoomuchmoreofthatpassion,butclearlyIrecognizethatmanypeoplewouldlikesomethingtochange.(Un-fortunately,theredoesn'tyetseemtobecompleteagreementonexactlywhattochange,althoughalmosteveryoneagreesthattheirpapershouldhavebeenacceptedintoSIGCOMM.)Aslongaswehave300papersubmissionstoaconferencethatcanaccommodatenomorethan30acceptedpapers,thereareboundtobeanumberofpeoplenothappywiththepaperselectionprocess.Asthisarticlegoestopress(pre-Barcelona,andhencebeforeIhavehadthechancetospeakattheCommunityFeedbackMeet-ing3)theSIGCOMMExecutiveCommitteehasstartedtocirculateaproposalforaTechnicalSteeringCommittee[3].Itismyhope&#151;andinitialfeedbackhasbeenpositive&#151;that,withafewtweaks,wecanproduceasolutionthatwillprovesatisfactorytothemajorityofpeople.Ofcourse,noamountofnewprocessor&#2;ne-tuningoftheoldprocesscanaddressthefactthatSIGCOMMcannotacceptmostofthesubmittedpapers.Totheextentthatthereexistsanyso-lutiontotheproblem,Ibelieveitliesintheestablishmentofad-ditionalhigh-qualityvenuesforthepublicationofnetworkingre-searchpapers.Ibelievewearefortunatetohavesuchvenuesemerging.Forexample,CoNEXTseemswellonitswaytobecom-ingaSIGCOMM-likeconference,andI'veheardgoodcommentsonthehighqualityofthisyear'ssubmissionsfromoneofthePCChairs.Thefactthatthereistimetoreviseapaperthatdidn'tmakeitintoSIGCOMM,takingaccountofreviewerfeedback,andsub-mittoCoNEXT,meansthatCoNEXTpapersneednotbeviewedassecond-tier,butratherthebene&#2;ciariesofonemoreroundofcare-fulreviewandrevision.(Itisworthnotingthatthisunderscorestheimportanceofthorough,insightfulreviewcomments,notjustnumericalevaluationofpapers.)Clearly,ifwewanttohavemorevenuesofcomparablequalitytotheSIGCOMMconference,we,asacommunity,needtodotheworktoachievethatquality.PCsandreviewershaveakeyrolehere,Ibelieve.IconsideritapositivedevelopmentthatmembersofthecommunityarethinkinghardabouthowPCsshouldanddofunction,andpublishingtheirinsights(see,forexample,[4,5,6]).Ihopethismightlaythegroundworkforfurtherimprovementinthequalityofourconferences.\n3WhenI&#2;rstheardthattheSIGCOMMBusinessMeetinghadbeenrenamedtothe&#147;CommunityFeedbackMeeting&#148;Iwonderedwhatwasafoot.Butitwasobservedthattheterm&#147;businessmeeting&#148;waseffectivelydissuadingmanypeoplefromattendingasessionwherewereallywouldliketohavebroadcommunityparticipation.\n3.COMMUNICATIONOnelasttopicthatIwanttoaddressisthatofcommunication.GiventhedesireformoretransparencyfromtheEC,Icertainlyhopethatwecanuseallthecommunicationtoolsatourdisposal.Ofcourse,toolsdon'tproducetransparency;theECneedstomakeuseofthem,andourmembersneedtoknowwheretheyare.Tothatend,letmelistthecommunicationtoolsthatIamcurrentlyawareof:&#15;CCR,bothprintandonlineathttp:\/\/ccr.sigcomm.org\/online\/.Hopefullyyouknowaboutthatone,asyou'rereadingit(well,maybenot,ifyouarereadingthisasaPDFdocument,butitwaspublishedinCCR).Don'tforgetthatyoucancommentonlineaswell.CCR'seditorialteamisalwayslookingforarticles,bothtechnicalandeditorial.&#15;TheSIGCOMMblogathttp:\/\/blog.sigcomm.org.Again,commentswelcome.&#15;TheSIGCOMMdiscussionmailinglist:sigcomm@postel.org.&#15;TheSIGCOMMmembersmailinglist(moderated,mostlyusedformonthlynewsannouncements)atSIGCOMM-MEMBERS@LISTSERV.ACM.ORG.&#15;TheSIGCOMMwebsite:http:\/\/www.sigcomm.org.Noteinparticularthatyoucansubscribetothenewsfeedathttp:\/\/www.sigcomm.org\/news\/RSSand&#2;ndourannualreportsathttp:\/\/www.sigcomm.org\/about\/annual-reports.&#15;TheSIGCOMMFacebookgroup.Sparselyusedtodate,butyoucan&#2;ndaphotoofMarkCrovellaandmetryingtosettletheSIGCOMMChairelectionbyatraditionalcontest.We'renotonTwitteryet,butit'sprobablyjustamatteroftime4.(TheSIGCOMM2009Conference&#151;withthetwitternamesigcomm09&#151;hasbeatentheECtothepunchonthatfront.)4.CONCLUSIONSAsthenewchairofSIGCOMM,themostimportantissueformerightnowisthatIneedtoreceiveinputfromthecommunity.Tothatend,I'vemadeafewspeci&#2;cproposals,whicharebynomeanssolidatthispoint,butintendedtopromptfurtherdiscussion:&#15;DevelopasectionoftheSIGCOMMwebsitetoprovidein-formationaboutresearchinterestsofindustrialplayers,includ-ingfundingandcollaborativeopportunitiesforacademicre-searchers;&#15;Holdasessionormini-workshopatSIGCOMM(and\/orothersponsoredconferences)tofosterinformationexchangeamongindustrialandacademicresearchers;&#15;ImprovethetransparencyoftheSIGCOMMECthroughin-creasedcommunicationinvariousforums(CCR,theblog,etc.);&#15;CreateaTechnicalSteeringCommitteetoadviseSIGCOMMPCchairs;&#15;Supportthegrowthofadditionalhigh-qualityconferencesandpublicationavenuesfortheSIGCOMMcommunity.\n4andchoosingausername&#151;sigcommisalreadygone.Ihopethatyouwillavailyourselfofthevariouscommunicationtoolsdescribedabove&#151;orgoodoldemailtomedirectly&#151;topro-videfeedbackontheseproposalsortomakeyourown.IamexcitedtobetheSIGCOMMChair.AsIsaid,it'sacom-munitythatIgreatlyenjoybeingpartof,andit'sanhonortobegiventheroleofchair.Itisapparentthatthejobwillentailafewchallenges.OneofthosewillbecollectinganddistillingallthedifferentviewpointsabouthowSIGCOMMshouldchange,andchartingapathforwardthatbuildsonSIGCOMM'sstrengthswhileaddressingtheconcernsofourmembership.IalsohopethatIandtherestoftheExecutiveCommitteecanhelptheSIGCOMMcom-munitythriveinmultipledimensions:byfosteringthegrowthofhigh-qualityconferences,workshopsandpublications;byenablinggreaterco-operationbetweenresearchersandindustry;byimprov-ingcommunicationwithinthecommunity.SIGCOMMhasbeenthehomeofagreatdealofinnovativeresearchovertheyears,andIhopeitwillcontinuetobeso.Ilookforwardtoworkingwiththiscommunityandtohearingyourfeedback.5.REFERENCES[1]Crovella,M.WhatdoestheECDo?http:\/\/blog.sigcomm.org\/2009\/05\/what\ndoes\nthe\nec\ndo.html[2]Shakespearianfool,http:\/\/en.wikipedia.org\/wiki\/Shakespearian\nfool[3]Proposal:ATechnicalSteeringCommitteeforSIGCOMMhttp:\/\/blog.sigcomm.org\/2009\/08\/proposal\na\ntechnical\nsteering.htmlJuly,2009[4]Feldman,A.ExperiencesfromtheSIGCOMM2005EuropeanshadowPCexperiment,SIGCOMMComput.Commun.Rev.,35(3):97&#150;102,July,2005.[5]WorkshoponOrganizingWorkshops,ConferencesandSymposiaforComputerSystemshttp:\/\/www.usenix.org\/event\/wowcs08April,2008[6]Papagiannaki,K.andRizzo,L.TheACMSIGCOMM2009technicalprogramcommitteeprocess,SIGCOMMComput.Commun.Rev.,39(3):43&#150;48,July,2009.\n"},{"title":"A host-network interface architecture for ATM","authors":"Bruce S. Davie","article":"http:\/\/dl.acm.org\/ft_gateway.cfm?id=116020&ftid=31557&dwn=1","bibtex":"http:\/\/dl.acm.org\/downformats.cfm?id=116020&amp;parent_id=&amp;expformat=bibtex&amp;CFID=745371419&CFTOKEN=41684288","text":""},{"title":"Sonic city installation","authors":"Davey Sams","article":"http:\/\/dl.acm.org\/ft_gateway.cfm?id=2513032&ftid=1397368&dwn=1","bibtex":"http:\/\/dl.acm.org\/downformats.cfm?id=2513032&amp;parent_id=&amp;expformat=bibtex&amp;CFID=745371419&CFTOKEN=41684288","text":"Sonic City Installation Davey Sams7 Bank StRichmond, VIC AUSTRALIA 3121+61439 462 763daveysams@gmail.comSonic City is an interactive work that explores themes of man's dislocation with nature and the social tensions inherent in urbanliving in an imaginative, engaging way.Users interact with a custom\nPermission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights \nIE'2013Sep 30 Oct 01 2013, Melbourne, VIC, Australia\nACM 9786\/13\/09.\nhttp:\/\/dx.doi.org\/10.1145\/2513002.2513032\n \nVISUALSFigure 3. The visuals of Sonic City. All the colour is projectedontowhite surfaceThe visuals depict the people of the Sonic City and the tensioninherent amongst them. The regular peoplethe \u00c3\u0094Peons\u00c3\u0095 wait to get to work and go about their daily lives. Meanwhile, from the forest that borders the Cemerge the magic beings hated by the Peons, but the original inhabitants of the land.This isall viewed by a youthful wolfwitness to the tensions as he rides his bike through the City, and also by an adolescent girl who attemptsto connect with the Forest. I am interested in exploring new ways to view projection mapping in this installation (projection mapping being the use of projected images used on irregular surfaces, often buildings, for visualeffect).A recenttrend has been to useprojection mapping to cover larger and larger surfaces skyscrapers or huge natural landmarks. However, with Sonic City I am interested in taking that technology and using it for something mediumsmall scale. In doing so, this reveals a unique use of the technology, almost like an optical illusion, while opening it to new uses and promoting a move away from this recent trend.Figure 4.  Diagram of the outside of the installation. Note the size.Figure 5.  Diagram revealing the inside of the installation. Sonic City has been designed to be transportable in small sectionsVIDEO DEMONSTRATIONFor a video demonstration of the Sonic City Installation please visit:https:\/\/vimeo.com\/54071461\nGosia Lapinskiassisted in generating some of the animation for Sonic Cexceptthe waterfall animation, whichwas executed by Chris Barker.\n"},{"title":"Comprehending finite maps for algorithmic debugging of higher-order functional programs","authors":"Olaf Chitil, \r\n                          Thomas Davie","article":"http:\/\/dl.acm.org\/ft_gateway.cfm?id=1389475&ftid=527926&dwn=1","bibtex":"http:\/\/dl.acm.org\/downformats.cfm?id=1389475&amp;parent_id=&amp;expformat=bibtex&amp;CFID=745371419&CFTOKEN=41684288","text":"ComprehendingFiniteMapsforAlgorithmicDebuggingofHigher-OrderFunctionalProgramsOlafChitilUniversityofKent,UKoc@kent.ac.ukThomasDavieUniversityofKent,UKtatd2@kent.ac.ukAlgorithmicdebuggersforhigher-orderfunctionallanguageshavetodisplayfunctionalvalues.Originallyfunctionalvalueshadbeenrepresentedaspartialapplicationsoffunctionandconstructorsym-bols,butarecentapproachrepresentsfunctionalvaluesas\u00denitemaps.Thetworepresentationsrequirethecomputationtreethat\nWedisregardthatshouldhavethetypeIO()Permissiontomakedigitalorhardcopiesofallorpartofthisworkforpersonalorclassroomuseisgrantedwithoutfeeprovidedthatcopiesarenotmadeordistributedforpro\u00detorcommercialadvantageandthatcopiesbearthisnoticeandthefullcitation\n4.allOddC(Branch(Leaf7)(Leaf5))True=False?5.allOddC(Leaf5)True=False?6.odd5=False?Faultindefinition:oddx=x\u0091mod\u00913==1A\u00denitemapincludesonlyargumentstowhichthefunctionwasap-pliedduringthecomputation.Whenansweringaquestion,theuserassumesthatthefunctionmapsanyotherargumenttotheunde\u00denedvalue.Everyquestioncontainsonlyonefunctionsymbol.Withadifferentfunctionrepresentationthemeaningofquestionschangesandhencequestionshavetobeaskedinadifferentorder.Mostquestionsarefareasiertounderstandwith\u00denitemapsthanwithpartialapplications,asplentyofexamplesbyPope(2005,2006)andDavieandChitil(2006)demonstrate.Furthermore,noalgorithmicdebuggersupported-abstractionsmeaningfullybe-foretheintroductionof\u00denitemaps.WediscussanotheradvantageinSection9.Pope(2006)givesadetailedtechnicaldescriptionofhisim-plementationof\u00denitemapsinthealgorithmicdebuggerBuddha.Thisdescriptionisspeci\u00dectohisimplementationandthusdoesnotsupportpropercomprehensionoftheprinciples,proofofcor-rectnessandexplorationofvariationsandextensions.Forexample,ifthefunctionwasalsousedinotherpartsofourprogram,wouldtheargumentofinquestion4looklikeFalse,TrueTrue,4242,\u0092c\u0092Surelywewanttohavelessargument-resultpairs,butwhichonesdowehavetoinclude?Toanswersuchquestionsweformallyde-\u00deneacomprehensiblemodelofalgorithmicdebuggingwitha\u00denitemaprepresentationoffunctionalvalues.Ourmodelrelatesalgorithmicdebuggingtoasimplegraphre-ductionsemantics.AlthoughweuseHaskell\u00d5ssyntax,allde\u00deni-tionsandtheoremsareindependentofwhetherthelanguageseman-ticsisstrictornon-strict.Eventhoughalgorithmicdebuggingwithfunctionsaspartialapplicationsandalgorithmicdebuggingwithfunctionsas\u00denitemapsuseratherdifferentlystructuredcomputa-tiontrees,wedescribetheminasingleframework.Onthepracticalsidethisintegrationshowshowasingleimplementationcansup-portbothformsofalgorithmicdebugging.Onthetheoreticalsideitclari\u00deesthedifferencesbetweenbothvariantsofalgorithmicde-bugging.Weprovethatalgorithmicdebuggingwith\u00denitemapsissound;onthewayweobservethat\u00denitemapsarewell-de\u00denedonlyifcertainprogramsareexcluded,astheyarebyHaskell\u00d5stypesystem.Modelandsoundnessproofallowsimpleexperimentationwithvariationsandextensionsofalgorithmicdebugging;weout-lineanumberofusefulones.2.OverviewAlgorithmicdebuggingisbasedontherepresentationofthecom-putation,whichyieldedtheerroneousresult,asacomputationtreeFigure1showstwocomputationtreesforourtreetraversalpro-gram,thestandardevaluationdependencytree(EDT)(NilssonandSparud1997),wherefunctionsarerepresentedaspartialapplica-tions,andthefunctiondependencytree(FDT),wherefunctionsarerepresentedas\u00denitemaps.Weusestringssuchasrrrranodes,forreasonsdiscussedlater.Centrally,eachnodeofacom-putationtreeislabelledwithasubcomputation.IntheEDTandFDTthesubcomputationisabig-stepreductionofafunctionsym-bolwithargumentvaluestoitsresultvalue:...Msubcomputationonitsowncanbejudgedtobeeithercorrect(thatis,agreeingwiththeuser\u00d5sintentions,orincorrect().Eachnodeisassociatedwithasliceoftheprogram;hereweassociateeachnodewiththeprogramequationthatwasusedtoreducetheredexofthelabel.Inalgorithmicdebuggingtheuser\u00d5sanswersdirectapaththroughthetreetoanodeassociatedwithafaultyslice(Naish1997).Ifinacomputationtreeallthechildnodesofanincorrectnodearecorrect,thenthisnodeissaidtobe.Atreeiscomputationtree,ifthesliceassociatedwithafaultynodeisfaulty,thatis,theprogramslicedisagreeswiththeuser\u00d5sintentions.Reformulated:ifallthesubcomputationsofthechildrenofanodearecorrectandthesliceassociatedwiththenodeisnotfaulty,thenthesubcomputationofthenodeitselfmustbecorrect.Soacomputationtreemustbecompositional.Iftherootnodeofacomputationtreeisincorrect,thenalgorithmicdebuggingwilllocateafaultynodeinthetree(Naish1997,Propositions1and3).ThemaindifferencebetweentheEDTandtheFDTistheirstructure.IntheEDTanode...Nisachildofa...M,if...Nwascalledfromfunction,moreprecisely,iftheapplication...Nappearsintherighthandsideofthede\u00denitionof.Incontrast,intheFDTa...Nisachildofanodeifthefunctionsymbolappearsintherighthandsideofthede\u00denitionof.Intuitivelythefunctionsymbolisrelevant,becausethenode...Mtobeequivalenttoits\u00denitemaprepresentation,whichisjusti\u00deedbychildrensuchas...NToprovethattheFDThasthefaultlocationproperty,thatis,theprogramequationassociatedwithafaultynodeisfaulty,we\u00dersthavetoclarifywhatwemeanbyareductionoraprogramequationbeingcorrect.Wesaythatareduction...Mcorrectifandonlyif...Mforsomebinaryrelationthatwecalltheintendedsemantics.Theintendedsemanticsmayexistinthemindoftheuserorbederivedfromsomeformofspeci\u00decation:EFINITIONintendedsemanticsisabinaryrelationtermswiththefollowingconsistencyproperties:1.Re\u00dfexivity:2.Transitivity:3.Closure:4.Leastelement:\u0006{}5.Application:,...,N6.Abstraction:,...,NThelasttwopropertiesstatethata\u00denitemapisafunctionasdescribedbyitsentries.isapre-congruencewithasleastelement.Socanbereadas\u00d2approximatesthevalue\u00d3.Thede\u00denitionleavesmuchfreedom.Forexample,forasetlibrarybothinsert2[1][1]andinsert2[1][1]mayhold.Aruntimeerrorisrepresentedasaspecialdataandhencehead[]mayhold.Inthispaperwejustassumethatanintendedsemanticsexists.programequationisfaultyifthereexistsasubstitu-suchthattheinstanceisnotwithintheintendedsemantics:Algorithmicdebuggingconsidersonlythosesubstitutionsofprogramequationsthatoccurredwithinacomputation;thereforeitlocatesfaultsinbothstrictandnon-strictfunctionalprograms.Tokeepthispaperself-containedwehavetorecapitulatede\u00deni-tionsandpropositionsoftheaugmentedredextrail(ChitilandLuo2007)andalgorithmicdebuggingwithfunctionsaspartialapplica-tions(LuoandChitil2007).\ncomputationtermswillbeformallyde\u00denedinDe\u00denition5.\n\u0002\nmain=False\nallOdd(Branch(Leaf7)(Leaf5))=False\nallOddCid(Branch(Leaf7)(Leaf5))True=Falserrr\nallOddC(allOddCid(Leaf5))(Leaf7)True=Falserrrraa\nodd7=Truerrrra\nallOddCid(Leaf5)True=False\nodd5=Falserrrrara\nidFalse=False\n\u0002\nmain=False\nallOdd(Branch(Leaf7)(Leaf5))=Falserrrrara\nidFalse=False\n(Branch(Leaf7)(Leaf5))True=Falserrrra\n(Leaf5)True=Falserrr\n(Leaf7)True=Falserrrraraa\nodd5=Falserrrraa\nodd7=True\nFigure1.EDTandFDTforthefullcomputationofthetreetraversalprogram3.TheAugmentedRedexTrailTorelatealgorithmicdebuggingtothecomputationofaprogram,weneedaformaldescriptionofthecomputation.Weusetheaug-mentedredextrail(ART)(ChitilandLuo2007),adatastructurethatdescribesthecomputationofafunctionalprogramindetail,includingallreductions,intermediatetermsandsharing.ThisARTisamodelofthetraceusedbytheHaskelltracerHat(Wallaceetal.2001).TheARTisagraphwhosestructurewasinspiredbystandardgraphreductionimplementationsoffunctionallanguages.BasicallyanARTdescribesastateofagraphreductionmachine,exceptthatwhenagraphreductionstephappens,theredexisnotoverwrittenbythereduct,butthereductisaddedtotheARTandredexandreductareconnectedviaareductionedge.Becausenoth-ingisoverwritten,thewholehistoryofacomputationispreserved.Thegraphstructureensuresspaceef\u00decientsharing.3.1TermGraphsFigure2showstheARTforthecomputationofourexamplepro-gramaftersixreductionsteps.Adottedarrowindicatesareduction.Eachnode\u00d5slabel,whichmayrefertofurthernodes,isdepictedin-sideanoval.themselvesare(possiblyempty)stringsoftheletters,thatis,n,m,o.Thusnodesalonepartiallydescribethegraphstructure:meansgoingtothefunctioncomponentofanapplication,meansgoingtotheargumentcom-ponentofanapplication,andmeansfollowingareductionedgetothereduct.AnisafunctionsymboloradataconstructorEFINITION2(Termgraph).applicationindirectiontermgraphisapartialfunctionfromnodestolabels,Thedomainoftermgraphisthesetofnodesforwhichthefunctionisde\u00dened.WesometimesregardatermgraphasasetoftuplesReductionedgesaregivenimplicitly:Ifandonlyifnodeexistsinthegraph,thenthereisareductionedgefromnodetonode.Sotorecordareductionwehavetoaddatleastonenode.Thereforeweneedaspecialindirectionnodetorecordthereductionofaprojectionsuchasidx=x.InFigure2onlynoderrrrararisanindirectionnode.Wewilloftenneedtofollowareductionorindirectionedge.Hencewede\u00denearelationshiponnodes:EFINITION3(Predecessor-successorrelation).beatermgraphandn,m.ThenClearlyanodehasatmostoneunique;butanodemayhaveseveralpredecessorsWewilloftenneedtofollowachainofreductionandindirectionedgestoitsend:\nInanARTindirectionnodesareneverreduced,i.e.,dom(;soforARTswecouldsimplifythede\u00denition.\n\u0080\u0002\nrrrraraaf\nrrrraraa\nrrrrara\nrrrrar\u0002\nrrrrarf\nrrrrar\nrrrrarar\nFigure2.TheARTofapartialcomputationofthetreetraversalprogramEFINITION4(Lastnode).beatermgraphand.Theno.mIfthereisnoin\u00denitesequenceofsuccessors,thenthelastnodeisde\u00denedanditisalwaysunique.Forexample,inthetermgraphofFigure2,rrrrrrrrararrrraraa3.2ProgramsWestillhavetode\u00denehowweconstructanARTforaparticularprogram.Ourprogramsareapplicativetermrewritingsystemssuchastheprogramintheintroduction.EFINITION5(Variousterms).termM,NapplicationTermsmaycontainbothnodesandvariables.Alabeltermisatermthatdoesnotcontainvariables.Aprogramtermisatermthatdoesnotcontainnodes.Acomputationtermisatermthatcontainsneithervariablesnornodes.Eachatomisassociatedwithanaturalnumber,itsternisaprogramtermwithoutfunctionsymbols....Pisaprogramequation,providedthatisafunctionsymbolofarityarepatternsandisaprogramtermsuchthatthevariablesofareasubsetofthevariablesof...Pprogramisasetofprogramequations.Weassumethatthemean-ingofeachprede\u00denedfunctionsuchasisgivenbyapossiblyin\u00denitesetofprogramequations.3.3AugmentedRedexTrailsAugmentedredextrails(ARTs)arede\u00denedinductively.Thegraphrepresentationofaninitialterm\u0004,M,isanART.IfisanARTandreducesinonestepwithprogram,thatis,,thenisanART:EFINITION6(Augmentedredextrail).beaprogramandacomputationterm.Atermgraph\u0004,Misanaugmentedredextrail(ART)forinitialtermandprogramFigure3de\u00denesallfunctionsusedinourde\u00denitionofARTs.DetailedexplanationsaregivenbyChitilandLuo(2007).Figure2showsoneofmanyARTsforourexampleprogram.Thereductionrelationisnon-deterministicandhenceARTscande-scribecomputationsofstrictandnon-strictlanguagesandabortedcomputations.InlaterexamplesdenotestheARTofthefullcom-putationofourtreetraversalprogram.ARTsare\u00deniteandacyclic(seeProposition7.2inChitilandLuo2007).Hencethelastnodeofachainisde\u00denedforany,andsoismatchn,M(cf.Section7inChitilandLuo4.ComputationTreesItisacentralpropertyoftheARTthateveryreductionstepper-formedinitsconstructioncaneasilybereconstructedfromitbytraversingasmallpartofthegraph.4.1MostEvaluatedFormsBecauseofreductionedges,asinglenodeofatermgraphusu-allyrepresentsmanycomputationterms.Analgorithmicdebug-germostlyshowsvaluesandhenceweareinterestedinthemostevaluatedformrepresentedbyagivennode.BecauseanARTmaycontainunevaluatedexpressions(incomplete,abortedcomputationorlazyevaluation)wespeakof\u00d2mostevaluatedforms\u00d3andnotofvalues.Toconstructamostevaluatedformwealwaysfollowsreductionandindirectionedges.Themostevaluatedform(mef)ofthenodeoftheARTinFigure2is(&&)True((&&)(odd7)(odd5)),intheARTitis.Wehavetodecidewhetherwewanttorepresentfunctionalvaluesaspartialapplica-tions()or\u00denitemaps().Forexample,\nThetermgraphforagivenlabelterm:n,an,an,mn,mn,MNn,MN,ifarenodesn,Mn,ifonlyisanoden,n,ifonlyisanoden,ngraph(,otherwiseMatchingisde\u00denedinductivelyoverthestructureofthematchedlabelterm:matcho,a)=(matcho,MNm,n.matchisanodethenelsematchisanodethenelsematcho,m)=(reductionrelationontermgraphsforprogramisde-\u00denedasfollows.Ifisatermgraphwithisaprogramequationoftheprogramisasubstitutionreplacingvariablesbynodes,matchn,L\u0003thenP,n,R\u0003withprogramequationandsubstitution\nFigure3.De\u00denitionsfortheARTEFINITION7(Mostevaluatedform)=mefT)=mef)mefForexample:)=mefT=mefT))=mefTFor\u00denitemapswehavetoextendourde\u00denitionofcomputationtermsbythealternativeform,...,NEFINITION8(Mostevaluatedform,ifarity(,ifarity(,otherwisewhere=mea)=meaTmeaTmeaT)=mea)mef{}}Letus\u00derstconsidertwoexamples:=(mea{}}rrrraraarrrrara,ifrrrrara,otherwise=(mearrrraraodd5rrrraraSothe\u00denitemapisempty,becausetheresultofthesingleapplica-tionofthefunction,odd5,wasnotreduced,butintheARTthefullcomputation:=(mearrffarrrraraarrrrara,ifrrrrara,otherwiseThemostevaluatedapplicativeformisde\u00denedidenti-callytothemostevaluatedformwithpartialapplicationsexceptthatargumentsofapplicationsarerepresentedwith\u00denitemaps.Themostevaluatedapplicativeformalwayscon-tainsanatomintheleft-mostposition(itisann-aryapplicationofanatomorjustanatom).Themostevaluatedformwith\u00denitedoesnotcontainanyfunctionsymbol,onlydataconstructors,applicationsand\u00denitemaps.Thede\u00denitionofthemostevaluatedformwith\u00denitemapsdistinguishesthreecases.Apartialapplicationofafunc-tionsymbolisrepresentedasa\u00denitemap.Theapplicationofafunctionsymbolofarityormoreargumentsidenti\u00deesanun-evaluatedtermandissimplyrepresentedas.Henceoursound-nessproofwillalsodemonstratethatinformationaboutunevalu-atedtermsisunnecessaryforalgorithmicdebugging.Anemptyrepresentsbothanunevaluatedtermandafunctionalvaluethatwasneverappliedtoasmanyargumentsasdemandedbyitsarity.Distinguishingthetwocasesjustwouldcomplicatethefor-malisation.Finallyamostevaluatedformcanbeadataconstructororanapplicationofadataconstructor.Thisrepresentationisleftunchanged.Sonotallfunctionalvaluesarerepresentedas\u00denitemaps.Partialapplicationsofdataconstructorsarestillsimplyrep-resentedaspartialapplicationsofdataconstructors.Afunctionmapisde\u00denedrecursively,locatingar-gumentsandtheresultbylocatingallapplicationsofthefunctionatnode.Tokeep\u00denitemapssmall,a\u00denitemapcomprisesappli-cationsofaspeci\u00decnode,notofafunctionsymbol.Forthecodemain=mapincrease[1,2]++mapincrease[3,4]theARTcontainstwonodesforandhencewewillobtaintheequations\nWecoulddropthiscaseandthusincludeunevaluatedtermsaswedointhede\u00denitionof.Orwecouldde\u00dene,if)mef...N=arity(andthusexcludeunevaluatedtermsthereaswell.\n\u0080\u0002\nr\nFigure4.TheARTofthefullcomputationofaprogramrequir-ingrank-2types2,2[1,2]=[2,3]4,4[3,4]=[4,5]thelongerequations2,23,34,4[1,2]=[2,3]2,23,34,4[3,4]=[4,5]Inthede\u00denitiontheconditionavoidssuper\u00dfuouscollectionofpartialapplications.Otherwisewewouldhave{{}\u0003{}}Thede\u00denitionyields\u00denitemapsoftheform3,3,butinpracticewemayprefertodisplaythemas3,134.2Well-De\u00denednessofFiniteMapsForpartialapplicationsthemostevaluatedformiswell-de\u00dened,becauseARTsareacyclic.However,thede\u00denitionsofaremutuallyrecursiveandmaynotbewell-founded.Thefollowingprogramexposestheproblem:main=gididx=xgh=(hh)4Figure4showstheARTofthefullcomputation.Wehave:)=fMap\nrrfrra\nisclearlynotwellde\u00dened.However,theabovepro-gramisnotacceptedbytheHaskell98typesystemnoranyothertypesystembasedontheHindley-Milnertypesystem(Milner1978).Suchtypesystemsdisallowapplyingaparametertoitselfasoccurshereinfunction.TheHindley-MilnertypesystemanditsextensionsforHaskell98orMLhavethepropertythateverypolymorphicfunctionisinstantiatedmonomorphicallyateveryoc-currencewhereitisusedintheprogram.HencewecanalsotypeanARTbyassigningamonomorphictypetoeachnode.Inthedef-initionofforanodethenodes,towhichisappliedrecursively,havetypesthatarecomponents(argumentandresulttyperespectively)ofthefunctionaltypeof.Sothear-gumentsoftherecursiveapplicationsarestrictlysmallerandthusiswell-de\u00dened.4.3Extension:MoreIndirectionNodesWecouldde\u00dene\u00denitemapsforanyprogramifwemodi\u00deedourde\u00denitionofARTs.Insteadofusingindirectionnodesonlyforprojectionswewouldinsertanindirectionforallvariables(orjustallvariablesoffunctionaltype)bymodifyingourconstructionof\nr\nFigure5.TheARTofthefullcomputationofaprogramrequir-ingrank-2typeswithadditionalindirectionsthegraphofareductasfollows:n,an,an,mn,mn,MNn,ngraph(Figure5showstheARTforthefullcomputationofourex-ampleprogramwiththeseadditionalindirectionnodes.Theaddi-tionalindirectionsenableustodistinguishdifferentinstancesofthesamefunction:)=fMaprrfa\nrrarrarrarraSuchadditionalindirectionswouldalsomakesome\u00denitemapssmallerandthussimplifyquestions.Forexample,forthestandardrecursivede\u00denitionofthefunctiontheevaluationofmapoddoddyieldstheequationsFalse,7[2,7]=[False,True]False,7[7]=[True]False,7[]=[]becausethereisonlyonesharednodeforthefunction.WithadditionalindirectionswewouldhaveseparatenodesandthusFalse,7[2,7]=[False,True][7]=[True][]=[]However,forHaskell98andMLadditionalindirectionnodesarenotnecessarybutwouldyieldlargertraces.Wearestillex-ploringfurtheralternativesfortracingprogramsindependentofanytypesystem.4.4EquationsFromaredexnode,thatis,anode,wecanreconstructanequationtobedisplayedasaquestioninanalgorithmicdebuggingsession.Anequationisapairofaredex,thatis,anapplicationofafunctionsymbol,andamostevaluated\nEFINITION9(Redexesandequations).bearedexnodeofanART)=redex)=redex)=mefT)=meaTToconstructaredexforaredexnodewedonotfollowthereductionedgefrom,butotherwisetheredexisde\u00denedlikethemostevaluatedform.4.5EDTandFDTBothEDTandFDThaveatreenodeforeachredexnodeintheART.Intheprecedingsubsectionwede\u00denedtheequationsofthenodes,whichdifferonlyinhowfunctionalvaluesarerepresented.Nowwehavetode\u00denethestructuresofthetwotrees.Hencewehavetorelateinstancesofright-hand-sidestoinstancesofleft-hand-sides.ThestructureofARTnodesmakesiteasytodetermineforagivennodetheredexnodeparent(thatcauseditscre-EFINITION10(ARTparentnode).parent(parent()=parent(parent()=parent(parent(Forexample,inFigure2parent(parent(Wecanidentifythefunctionnodeofaredexnode:EFINITION11(Functionnode).bearedexnodeofan,if,ifEFINITION12(EDT,FDT).ThesetoftreenodestreeNodesisthesetofredexnodesoftheARTevaluationdependencytree(EDT)foranARTconsistsofthetreenodestreeNodeslabelledwithandrelatedviaparent(LuoandChitil2007).functiondependencytree(FDT)foranARTconsistsofthetreenodestreeNodeslabelledwithandrelatedviaparentFDT=parentTherootofanynon-emptyEDTorFDTisTheEDTisbasicallytheprooftreeofanaturalsemanticsforacall-by-valuecomputationthatmayskipsomesubcomputations.ThestructureoftheEDTisdeterminedbytheparentoftheapplica-tionofaredex,thestructureoftheFDTisdeterminedbytheparentofthefunctionsymbolofaredex.Ina\u00derst-orderprogramfunctionsymbolandapplicationalwaysappeartogetherintherighthandsideofade\u00denition.HencethentheEDTandtheFDTareidenti-cal(therearealsonofunctionalargumentstobedisplayedas\u00denite5.SoundnessProoffortheFDTRecallfromSection2thattheintendedsemanticsisabinaryrela-ontermsmeetingsixconsistencyproperties.Furthermore:EFINITION13(Correctnessandfaultiness).FDTtreenodecorrectallFDTchildrenoftreenodecorrecttreeNodesparentFDTFDTtreenodecorrectFDTtreenodeFDTtreenodeincorrectallFDTchildrenoftreenodecorrectprogramequation\u0003.L\u0003Wehavetoprovethat,ifanFDTtreenodeisfaulty,thenitsassociatedprogramequationisfaulty.TodosoforanyFDTtreenode,wesplitthecomputation)=mefintoaninitialreductionstepfromredexto)=reduct,andaremainingcomputationfromreducttomostevaluatedform,)=mef.Wewillprovethat,ifisfaulty,thenFromthelatterimmediatelyfollows,thattheassociatedprogramequationisfaulty:ROPOSITIONbearedexnodeofART.If,thenitsassociatedprogramequationisfaulty.ROOF.AnalogoustoProposition8.9ofChitilandLuo(2007).isaninstanceoftheassociatedprogramWestillneedtode\u00denehowwereconstructfromaredexnodeofanARTthereductofthereduction,thatis,theinstanceoftherighthandsideoftheprogramequationusedforthereduction.Allnodesthathaveasparentformtheright-hand-sideoftheprogramequationandthereforebelongtothereduct.Sothereductcomprisesofallnodesthatarereachablefromthetopnodeofthereductviathenodeletters.Sharedsubtermsarerepresentedintheirmostevaluatedform.ThereductbodyisthepartofareductbelowthetopnodeEFINITION14(Reductofaredexnode).)=reductB,if,if)reductB,if)mef,if)reductB,if)mef,ifForexample:=reductB=reductB)reductBrra=reductB)mef)reductBrra=reductB)reductBrrffa)mef)reductBrraallOddCid(Branch(Leaf7)(Leaf5))True\nparent(\n3\nn\n2\n1\n4\nFigure6.ExtractofanARTconcentratingononereducttooutlinetheproofideaofProposition4ontheCorrectnessoftheReductNowtotheproof:Proposition2makesastatementabouttheintendedsemanticsofafunctionsymbol:ifcertainFDTnodesarecorrect,thenthefunctionsymboliscorrectlyapproximatedbythe\u00denitemap.Proposition3makesastatementabouttheintendedse-manticsofapplication:applyingamostevaluatedform(usuallya\u00denitemap)toanothermostevaluatedformiscorrectlyapprox-imatedbythemostevaluatedformoftheapplication.Basedonthesetwopropositionsweprovebyastructuralinductionontheright-hand-sideofaprogramequationthatalgorithmicdebuggingwith\u00denitemapsissound(Corollary1).Soforanyfuturevariationofalgorithmicdebuggingwith\u00denitemapswewillaimtoensurethatPropositions2and3stillholdandthensoundnessofthatvari-ationisguaranteed.Thecompleteproofsareintheappendix.ROPOSITIONforsomefunctionsymbolarity(andallFDTchildrenofparent(arecorrect,thenROOF.Becausearity(,wehavetreeNodes)=fMapWeprovethemoregeneralpropertythatiftreeNodes...Nforsomefunc-tionsymbolandcomputationtermsarity(,andallFDTchildrenofparentFDTarecorrect,then=arity(.ProofbyinductiononROPOSITIONIntheFDTapplicationisintheintendedseman-tics,thatis,)mefROOF.ProofbycaseanalysisonROPOSITION4(CorrectnessoftheReduct).isatreenodeandallitsFDTchildrenarecorrect,thenROOF)=reductBfollowsfromthemoregeneralproperty:Ifdom(andallFDTchildrenofparent(arecorrect,thenInductiononheight)=maxTheinductiveproofofProposition4isoutlinedinFigure6.Itshowsinlightgreyallthenodesrepresentingaright-hand-sideofaprogramequation,plustheirparentnodeparent(andonenodethatsharesanodeofthisright-hand-side.Thebasestepoftheinductioncoverstheleafnodes,thatisatomnodesandapplicationnodespointingtosharednodes(indicatedbyedgesgoingtothebottomleft).Theinductionstepthencoversinnerapplicationnodessuchas.ThenodesaretheFDTchildrenofthenodeparent(.Roughly,Proposition2isneededforthebasestepandProposition3fortheinductionstep.OROLLARY1(FDTisacomputationtree).Iftreenodeisfaulty,thenROOF.Letbeatreenode.AccordingtoProposition4wehave.AssumeBytransitivityincontradictiontoourhypothesisthatthetreenodeisincorrect.Hence6.TrustingInDe\u00denition12oftheEDTandtheFDTeveryredexnodeoftheARTbecomesatreenode.However,inourexampleEDTandFDTofFigure1weexcludedreductionsofprede\u00denedfunctionssuchas.Wecandoso,becausewethede\u00denitionsofthesefunctionstobecorrect.Ifwetrustde\u00denitionstobecorrect,thentreenodesassociatedwiththesede\u00denitionsmustbecorrect.Hencethealgorithmicdebuggerdoesnothavetoaskaboutthesetreenodes.Evenbetter,wecanremovesuchtrustedtreenodesfromthetree.Atrustedtreenodemaystillhavechildren(commonforhigher-orderfunctionsintheEDT;alsowemaytrustatestingscaffoldcallingoursuspectedcode);soifweremoveatrustedtreenode,itsparentnodegainsthechildrenoftheremovednode.AsnotedalreadybyShapiro(1983),algorithmicdebuggingisstillsoundwhentrustingisapplied.Trustingappliestoanycompu-tationtree,independentofitsparticularde\u00denitionandconceptuallyisappliedafterconstructingthecompletecomputationtree.Tosavetimeandspace,itisdesirableinpractisetoavoidtracingandcon-structingcomputationtreenodesfortrustedcode.7.AnExampleVariantWhathappensifwemakeasmallchangetoourexamplepro-gram,ifweremovetheBooleanargumentfromtheequationsallOddCc(Leafn)=flip(&&)(c(oddn))allOddCc(Branchlr)=allOddC(allOddCcr)lwherethefunctionswapsarguments:flip::(a&#x0000;-b-&#x0000;c)-&#x0000;b-&#x0000;a-&#x0000;cfxy=fyxFigure7showstheEDTandFDTforthisvariant.ThenewEDTincludesanodelabelledallOddC(flip(&&)False)(Leaf7)=flip(&&)FalsewhereasthecorrespondingnodeoftheFDTislabelled(Leaf7)=Theformerquestionrequiresustointerpretthefunctionsymbols.Thelatterexpressesthatthe\u00denitemap(indeedcorrectly)approximatesthefunctionalvalueof(Leaf7).Thusthisex-ampledemonstratestheoccurrenceofafunctionalvalueasresultvalue.ThestructureoftheFDTisthesameastheoneforourorigi-nalprogram,whereasthestructureoftheEDTdifferssubstantiallycomparedtotheEDToftheoriginalprogram.Infact,thestruc-tureofthenewEDTissimilartothestructureoftheFDT.Our\n\u0002\nmain=False\nallOdd(Branch(Leaf7)(Leaf5))=False\nflip(&&)FalseTrue=False\nallOddCid(Branch(Leaf7)(Leaf5))=flip(&&)Falserrfrfa\nallOddCid(Leaf5)=flip(&&)False\nallOddC(flip(&&)False)(Leaf7)=flip(&&)Falserrfrfaraa\nodd5=Falserrfrfara\nidFalse=Falserrfrraa\nodd7=Truerrfrra\nflip(&&)FalseTrue=False\n\u0002\nmain=False\nallOdd(Branch(Leaf7)(Leaf5))=Falserrrrara\nidFalse=False\n(Branch(Leaf7)(Leaf5))=rrfrfa\n(Leaf5)=rrfr\n(Leaf7)=rrfrfaraa\nodd5=False\nFalseTrue=False\nodd7=True\nFalseTrue=False\nFigure7.EDTandFDTforthefullcomputationoftheexamplevariantsimpleandcommonlyusedprogramrefactoringdoesnotchangetheoccurrencesoffunctionsymbolsinanequation.ThusitleavesthestructureofanFDTunchanged,whereasitmaysubstantiallychangethestructureofanEDT.8.RelatedWorkNaish(1997)givesanabstractdescriptionofalgorithmicdebug-ging,independentofanyparticularprogramminglanguage.Heprovesthatalgorithmicdebuggingiscompleteinthesensethatiftheprogramcomputationproducesawrongresult,thenalgorithmicdebuggingwilllocateafault.Nosuchgeneralproofexistsfortheofalgorithmicdebugging,thatis,thepropertythattheindicatedfaultlocationisindeedfaulty,becausesoundnessdependsonthespeci\u00decde\u00denitionofthecomputationtree.ForlazyfunctionalprogramminglanguagesNilssonandSparud(1997)introducedtheevaluationdependencytree(EDT)ascompu-tationtree.TheEDThasthepropertythatthetreestructurere\u00dfectsthestaticfunctioncallstructureoftheprogramandallargumentsandresultsareintheirmostevaluatedform.FormanyyearstheEDTwasconsideredtobetheonlyusefulcomputationtreeforfunctionalprograms.Caballeroetal.(2001)giveaformalde\u00denitionoftheEDTforalazyfunctionallogiclanguageandoutlineasoundnessproofofalgorithmicdebugging.Theyintroducedtheformalisationoftheintendedsemanticsthatweextend.TheirapproachreliesontheEDTbeingde\u00denedthroughahigh-levelnon-deterministicbig-stepsemantics.Thisbig-stepsemanticsisunsuitableforde\u00deningtheFDT,becauseitwouldbehardtorelatetheoccurrenceofafunctionsymbolinanargumentwithanapplicationofthefunctionsymbol.Incontrast,theaugmentedredextrail(ART)(ChitilandLuo2007)recordssuchinformationdirectlyinitsgraphstructureandasanexplicitdatastructureitisalsoeasiertomanipulate.Aformalde\u00denitionoftheEDTbasedontheARTtogetherwithasoundnessproofarealreadygivenbyLuoandChitil(2007).ThesoundnessprooffortheFDTissimilarlystructuredbutlonger,becauseithastohandlethe\u00denitemaprepresentationanditsproperties(cf.Propositions2and3).WithoutadditionalworkitalsocoverstherepresentationofunevaluatedsubexpressionsbyaspecialsymbolPope(2005,2006)introducedtheideaofrepresentingfunc-tionalvaluesas\u00denitemapsintoalgorithmicdebuggingofhigher-orderfunctionallanguagesandimplementeditintheHaskellde-buggerBuddha.Hedemonstratesitsusefulnessanddescribestheimplementationbutgivesnoformalmodel.HedoesnotusethenameFDTbutconsidersitasavariantoftheEDT.Popeusesthetermintensionalstyleforthepartialapplicationrepresentationandextensionalstyleforthe\u00denitemaprepresentationoffunctionalval-TheARTisamodelofthetraceusedbytheHaskelltracerHat,whichincludesanEDT-basedalgorithmicdebugger.Hatrecordsthetraceina\u00dele.Hathasbeenusedfordebuggingthenhc98compiler(Chitiletal.2003)andachessend-gamesolverthatexecutes6millionreductions,producingtracesofseveralhundredmegabytes,about40-50bytesperreduction(Wallaceetal.2001).Thede\u00denitionofdemonstratesthatthealgorithmicdebuggerneedstoreadonlyatinyfragmentofahugetrace\u00deletoconstructanequation.Evenlongercomputationscanbedebuggedifthemajorityoftheprogramistrustedandthusitsreductionsarenotrecordedinthetrace.\nBothNilsson(1999)andPope(2006)developedpiecemealtrac-ingschemestoreducethetracesizeofalgorithmicdebuggersforlazyfunctionallanguages.Initiallyonlyatoppieceofthecompu-tationtreeisrecorded;whenthefaultlocalisationprocessreachesthefringeofthispiece,thecomputationisre-executedandanotherpieceisaddedtotherecordedtree.Theseschemesrequirecompleximplementationsandstillproducerelativelylargetraces.Bra\u00a7eletal.(2007)developedanalternativetechniqueforEDT-basedalgorithmicdebuggingoflazyfunctionallanguagesthatre-ducesthetracesizebyatleastfourordersofmagnitude.Thetraceisonlyasequenceofintegersthattellsacall-by-valueevaluatoraf-terhowmanystepstoskipevaluatingaredexsothatitproducesthesame\u00denalresultasalazycomputation.Toconstructanequation,thelazycall-by-valueevaluatorre-executesapartofthecomputa-tion.OverallthetimefortracegenerationandequationconstructionissimilartothatofHat.Ourpapershouldprovideagoodfounda-tionfordetermininghowthelazycall-by-valueevaluatorofBra\u00a7eletal.couldbemodi\u00deedtosupportFDT-basedalgorithmicdebug-9.SummaryandFutureWorkWeformallyde\u00denedthefunctiondependencytree(FDT),acom-putationtreeforalgorithmicdebuggingofhigher-orderfunctionalprogramsthatrepresentsfunctionalvaluesas\u00denitemaps.Wede-\u00denedtheFDTintermsoftheaugmentedredextrail(ART),atracethatdescribesthegraphreductioncomputationofafunctionalpro-gramindetail,butindependentofanyevaluationorder.ThusweprovedthesoundnessofalgorithmicdebuggingwiththeFDT,thatis,thateverylocatedfaultisindeedafault.Allde\u00denitionsandthe-oremsapplytobothstrictandnon-strictfunctionallanguages.Everyoccurrenceofafunctionsymbolintherighthandsideofanequationcreatesateveryreductionofthisequationanewfunc-tionnodeintheART.The\u00denitemapofsuchafunctionnodecon-tainsonlythearguments(andresults)towhichthisnodewasap-plied,notallarguments(andresults)ofthefunctionsymbol.Thissmallersetissuf\u00decientforsoundness.AfunctionthatispassedasaparameterdoesnotcreateanewnodeintheARTandhenceself-applicationofafunctionpassedasparametercreatesanARTforwhichthe\u00d2\u00denite\u00d3mapofthefunctionisill-de\u00dened;becauseofcyclicdependenciesitcouldbein\u00denite.ThisisnotaproblemforHaskell98orStandardML,becausetheHindley-Milnertypesys-temexcludessuchself-application.Alternativelywecouldmodifythede\u00denitionoftheARTtoincludemoreindirectionnodes:thuswecouldobtain\u00denitemapsforanyprogramandevensmaller,morespeci\u00dec\u00denitemapsformanyprograms.Wearestilllookingforal-ternativesolutionsthatdonotrequiresuchadditionalindirectionnodesbutstillyieldrelativelysimplede\u00denitionsof\u00denitemaps.TheARTisamodelofthetraceusedbytheHaskelltracerHat.ThusthispapershowshowlittleeffortisneededtoextendHatsuchthatitsupportsalgorithmicdebuggingwithbothpartialapplicationsand\u00denitemaps.Aprototypeexists,butinpractiseconstructionofthe\u00denitemapsistimeconsumingandhenceweareworkingonmoreef\u00decientalgorithms.Thereisaclearsymmetrybetweenthede\u00denitionsofthestan-dardevaluationdependencytree(EDT)andtheFDT.Thecloserelationshipsuggeststhatsoundmixturesofthetwocomputationtreesexistandfurthervariations,forexamplewithequationsthatdonotrespectthearityoftheoriginalfunctionde\u00denitions,areworthexploring.TheFDTalsoenablesalgorithmicdebuggingoftop-leveldef-initionsindependentoflocalde\u00denitionsmadeinwhere-orlet-clauses.Theideaisthatalgorithmicdebuggingcouldaskonlyquestionsaboutfunctionsde\u00denedatthetop-level.Whenafaultyfunctionisidenti\u00deed,thefaultiseitherinthede\u00denitionofthatfunc-tionitselforitslocalfunctionde\u00denitions.Thiskindoflowgranu-larityalgorithmicdebuggingrequireslessquestionsanditisstillpossibletolocatethefaultmorepreciselybylateraskingquestionsaboutlocallyde\u00denedfunctions.SuchlowgranularityalgorithmicdebuggingisunsoundfortheEDT,becausethecallsiteforafunc-tionpassedoutofalocalscopecanbeanywhereintheprogram.Incontrast,locallyde\u00denedfunctionsymbolscanonlyoccurwithinthesurroundingde\u00denition.Toprovethesoundnessofthisalgorith-micdebuggingscheme,wewillhavetoextendourARTmodeltoprogramswithlocalfunctionde\u00denitions.AcknowledgementThisworkhasbeenpartiallysupportedbytheUnitedKingdomunderEPSRCgrantEP\/C516605\/1.ReferencesBerndBra\u00a7el,MichaelHanus,SebastianFischer,FrankHuch,andGermVidal.Lazycall-by-valueevaluation.InICFP\u00d507:Proceedingsofthe2007ACMSIGPLANInternationalConferenceonFunctionalProgram-,pages265\u00d0276,2007.RafaelCaballero,FranciscoJ.Lopez-Fraguas,andMarioRodrArtalejo.Theoreticalfoundationsforthedeclarativedebuggingoflazyfunctionallogicprograms.InHerbertKuchenandKazunoriUeda,ed-FunctionalandLogicProgramming,FLOPS2001,LNCS2024,pages170\u00d0184.Springer,2001.OlafChitilandYongLuo.Structureandpropertiesoftracesforfunctionalprograms.InIanMackie,editor,Proceedingsofthe3rdInternationalWorkshoponTermGraphRewriting,Termgraph2006,ENTCS176(1),pages39\u00d063,2007.OlafChitil,ColinRunciman,andMalcolmWallace.TransformingHaskellfortracing.InProceedingsofthe14thInternationalWorkshoponIm-plementationofFunctionalLanguages(IFL2002),LNCS2670,pages165\u00d0181,2003.ThomasDavieandOlafChitil.Displayoffunctionalvaluesfordebugging.DraftProceedingsofthe18thInternationalSymposiumonImple-mentationandApplicationofFunctionalLanguages,IFL2006,pages326\u00d0337.EosLorandUniversity,September2006.TechnicalReportNo2006-SO1.YongLuoandOlafChitil.Provingthecorrectnessofalgorithmicdebug-gingforfunctionalprograms.InTrendsinFunctionalProgrammingvolume7,pages19\u00d034.IntellectBooks,2007.RobinMilner.Atheoryoftypepolymorphisminprogramming.JournalofComputerandSystemSciences,17:348\u00d0375,December1978.LeeNaish.Adeclarativedebuggingscheme.JournalofFunctionalandLogicProgramming,1997(3),1997.HenrikNilsson.Tracingpiecebypiece:affordabledebuggingforlazyfunc-tionallanguages.InProceedingsofthe1999ACMSIGPLANInter-nationalConferenceonFunctionalProgramming,pages36\u00d047.ACMPress,1999.HenrikNilssonandJanSparud.Theevaluationdependencetreeasabasisforlazyfunctionaldebugging.AutomatedSoftwareEngineering:AnInternationalJournal,4(2):121\u00d0150,April1997.BerniePope.DeclarativedebuggingwithBuddha.InAdvancedFunctionalProgramming,5thInternationalSchool,AFP2004,LNCS3622,pages273\u00d0308.SpringerVerlag,September2005.BerniePope.ADeclarativeDebuggerforHaskell.PhDthesis,TheUniversityofMelbourne,Australia,2006.E.Y.Shapiro.AlgorithmicProgramDebugging.MITPress,1983.MalcolmWallace,OlafChitil,ThorstenBrehm,andColinRunciman.Multiple-viewtracingforHaskell:anewHat.InProceedingsofthe2001ACMSIGPLANHaskellWorkshop,UU-CS-2001-23.UniversiteitUtrecht,2001.\nAppendix:CompleteProofsThefollowinglemmawillbeusedseveraltimes.Anapplicationthatisnottheapplicationofafunctionarity(argumentscannotbeatreenode,thatis,...Narity(+1)treeNodesROOF.AssumetreeNodes.ItfollowsthatmeaT)=mea)mef...N.Fol-lowingLemma8.9ofChitilandLuo(2007)isanin-stanceoftheleft-hand-sideofarule.Theleft-hand-sideofaruleisanapplicationofafunctionsymboltoexactlyarity(terns.BecauseofthiscontradictionouroriginalassumptionthattreeNodesmustbewrong.ROOFOFROPOSITION2.Weprovethemoregeneralprop-ertythat,iftreeNodes...Nforsomefunctionsymbolandcomputationtermsarity(,andallFDTchildrenofparentFDTarecorrect,then=arity(.InductionontreeNodes.Thenwehave...N.Becausearity(wegetincontradictiontoouroriginalhypothesisthat.HenceourassumptioniswrongandtreeNodesWehave)=meaT))=meaT)mef...N.FurthermoreparentFDT)=parentFDT.ThereforeisachildparentFDTandsohenceweknowthat)mefBecausewehavethisforany,theabstractionpropertyoftheintendedsemanticsgivesus)=mefarity(followsarity(.Together)=mea...NLemma1givesustreeNodes,so)=mea)mef)=mea)mef...N.Becausewehavearity(1)=andsoarity(,wecanapplytheinductionhypothesis.ForalltreeNodesparentFDT)=parentFDTweknowthattheparentFDT)=parentFDTholds.SoforalltreeNodeswehaveparentFDTparentFDTimplies.ThereforeTogetherwith)=mea)mefweobtainthat)mefBecausewehavethislastrelationshipforanyweobtainwiththeabstractionpropertyoftheintendedsemantics.Theconditionisnotneces-sary,buttherelationshipstillholdswithadditionalconditions.Weconcludethat)=mefROOFOFROPOSITION3.Caseanalysison...Narity()=fMapTrivially)mef\u0006{}=mef.Togetherwiththeapplicationpropertyweget)mef)mef...Narity(AccordingtoLemma1treeNodes.So)mefarity(.Therefore.Clearly)mef=mef...N...Nforsomeconstructorterms...N.Lemma1givesustreeNodes.So)=mea)mef)=mea.Therefore\u00denallyweknowthat)mef)=mea)mef)=meaROOFOFROPOSITION4(CORRECTNESSOF)=reductBlowsfromthemoregeneralproperty:IfandallFDTchildrenofparent(arecorrect,thenInductiononheight)=maxtreeNodesparentFDT)=parent(wehave.SotreeNodesarity(then\u0006{}else=meaandwithProposition2weget)=mef=mefByde\u00denition)=mef)=mef)mef.WithProposition3weobtain\n)=reductB)mef.AccordingtotheinductionhypothesisThereforewithcontextclosureoftheintendedsemantics)meffollowsandwithProposition3weobtain)=mef)reductB.Accordingtotheinductionhypothesis)mefandthus)=reductB)reductB.Fromtheinductionhypothesisweobtain.Therefore)mefandconsequently\n"},{"title":"Bayesian network, a model for NLP?","authors":"Davy Weissenbacher","article":"http:\/\/dl.acm.org\/ft_gateway.cfm?id=1609007&ftid=568031&dwn=1","bibtex":"http:\/\/dl.acm.org\/downformats.cfm?id=1609007&amp;parent_id=&amp;expformat=bibtex&amp;CFID=745371419&CFTOKEN=41684288","text":"BayesianNetwork,amodelforNLP?DavyWeissenbacherLaboratoired'InformatiquedeParis-NordUniversiteParis-NordVilletaneuse,FRANCEdavy.weissenbacher@lipn.univ-paris13.frAbstractTheNLPsystemsoftenhavelowperfor-ncesbecausetheyrelyonunreliableandheterogeneousknowledge.Weshowonthetaskofnon-anaphoricitidenti&#2;-\n195\n91.4%Accuracyonatechnicalcorpus.Howevertheperformancesaredegradedifoneappliesthemtocorporaofdifferentnatures:thenumberoffalsepositiveincreases.Inordertoavoidthispitfall,(Lappin,1994)pro-posessomemoreconstrainedrulesintheformof&#2;nitestateautomata.Basedonlinguisticknowl-edgetheautomatarecognizespeci&#2;csequenceslikeItisnot\/maybeModaladjItisCogv-edthatSubjectwhereModaladjandCogvaremodaladjectiveandcognitiveverbsclassesknowntointroducenon-anaphoricite.g.necessary,possibleandrecommend,think).Thissystemhasagoodprecision(fewfalsepositivecases),buthasalowrecall(manyfalsenegativecases).Anysequencewithavariationisignoredbytheautomataanditisdif&#2;culttogetexhaustiveadjectiveandverbsemanticclasses.InthenextragraphswerefertoLappinrules'asHighlyConstraintrules(HCrules)andPaicerules'asLightlyConstraintrules(LCrules).(Evans,2001)givesuptheconstraintsbroughtintoplaybytheserulesandproposesamachinelearningapproachbasedonsurfaceclues.Thetrainingdeterminestherelativeweightofthevari-ouscorpusclues.Evansconsiders35syntacticandcontextualsurfaceclues(e.g.pronounpositioninthesentence,lemmaofthefollowingverb)onamanuallyannotatedsample.Thesystemclassi&#2;esthenewitoccurencesbythek-nearestneighbormethodmetric.The&#2;rsttestsachieveasatisfac-toryscore:71.31%Acconagenerallanguagecor-pus.(Clement,2004)carriesoutasimilartestinthegenomicdomain.HereducesthenumberofEvans'ssurfacecluestothe21mostrelevantonesandclassi&#2;esthenewinstanceswithaSupportVectorMachine(SVM).Itobtains92.71%Acctobecomparedwitha90.78%AccscorefortheLCrulesonthesamecorpus.Thedif&#2;culty,however,comesfromthefactthattheinformationonwhich\nAccuracy(Acc)isaclassi\u00c2\u00aecationmeasure:Acc=\nwhereisthenumberofanaphoricpronounoccurencestaggedasnon-anaphoric,whichwecallthefalsepositivecases,thenumberofnon-anaphoricpronounocurrencestaggedasanaphoric,thefalsenegativecases.andarethenumbersofcorrectlytaggednon-anaphoricandanaphoricpronounoccurences,thetruepositiveandnegativecasesrespectively.ForinstanceinthesentencesItiswelldocumentedthattreatmentofserum-grown...andItisgenerallyacceptedthatBcl-2exerts...theitoccurencesarenotclassi\u00c2\u00aeedasnon-anaphoricsbecausedocumenteddoesnotbelongtotheorigi-nalverbclassCogvandgenerallydoesnotappearinthepreviousautomaton.thesystemsarebuiltisoftendiverseandhetero-neous.Thissystemisbasedonatomicsurfacecluesonlyanddoesnotmakeuseofthelinguisticknowledgeortherelationalinformationthattheconstraintsoftheprevioussystemsencode.Wear-guethatthesethreetypesofknowledgethataretheHCrules,theLCrules,andthesurfacescluesareallrelevantandcomplementaryforthetaskandthattheymustbeuni&#2;edinasinglerepresentation.3ABayesianNetworkBasedSystem\nContainNo&#0;Contain\nContain&#0;Known&#0;Noun\nAnaphoric&#0;ItNon&#0;anaphoric&#0;It\nPronounStarNo&#0;Start\nStart&#0;PropositionStartNo&#0;Start\nStart&#0;SentenceStartNo&#0;Start\nStart&#0;AbstractNo&#0;matchMatch\nLeft&#0;Context&#0;ConstraintsContainNo&#0;Contain\nContain&#0;Known&#0;AdjectiveMatchNo&#0;matchSuperior&#0;eleven...threeInferior&#0;threeContainNo&#0;ContainMoreThreeTwoOneOtherPrepositionObjectSubject\nGrammatical&#0;RoleMatchNo&#0;matchToThatWhether&#0;ifWhich&#0;WhoOther\nSequence&#0;LengthLCR&#0;AutomataContain&#0;Known&#0;VerbHCR&#0;AutomataUnknown&#0;WordsDelimitor\nFigure1:ABayesianNetworkforidenti&#2;cationofnon-anaphoricitoccurrencesNeitherthesurfacecluesnorthesurfacecluesarereliableindicatorsofthepronounstatus.Theyencodeheterogeneouspiecesofinformationandconsequentlyproducedifferentfalsenegativeandpositivecases.TheHCruleshaveagoodprecisionbuttagonlyfewpronouns.Ontheopposite,theLCrules,whichhaveagoodrecall,arenotpreciseenoughtobeexploitedassuchandtheadditionalsurfacecluesmustbechecked.Ourmodelcom-binesthesecluesandtaketheirrespectivereliabil-ityintoaccount.Itobtainsbetterresultsthanthoseobtainedfromeachclueexploitedseparately.TheBNisamodeldesignedtodealwithdubi-ouspiecesofinformation.Itisbasedonaqualita-tivedescriptionoftheirdependancyrelationships,adirectedacyclicgraph,andasetofcondition-nalprobablities,eachnodebeingrepresentedasaRandomVariable(RV).ParametrizingtheBNassociatesanaprioriprobabilitydistributionto\n196\nthegraph.ExploitingtheBN(inferencestage)consistsinpropagatingnewpiecesofinforma-tionthroughthenetworkedgesandupdatingthemaccordingtoobservations(aposterioriprobabili-ties).WeintegratedallthecluesexplotedbyofthepreviousmethodswithinthesameBN.Weusede-pendancyrelationshipstoexpressthefactthattwocluesarecombined.TheBNismanuallydesigned(choiceoftheRVvaluesandgraphstructure).OntheFigure1,thenodesassociatedwiththeHCrulesmethodaremarkedingrey,whiteisfortheLCrulesmethodandblackfortheClement'smethod.Theronounodeestimatesthede-cisionprobabilityforagivenitoccurencetobenon-anaphoric.Theparameterisingstageestablishestheapri-oriprobabilityvaluesforallpossibleRVbysim-plefrequencycountsinatrainingcorpus.Theyexpresstheweightofeachpieceofinformationinthedecision,itsapriorireliabilityintheclassi&#2;-cationdecision.Theinferencestageexploitstherelationshipsforthepropagationoftheinforma-tionandtheBNoperatesbyinformationreinforce-menttolabelapronoun.WeappliedallprecedentrulesandcheckedsurfacecluesonthesequencecontainingtheitoccurrenceandsetobservationvaluestothecorrespondantRVprobabilities.Anewprobabilityiscomputedforthenode'svari-ablePronoun:ifitissuperiororequalto50%thepronounislabelednon-anaphoric,anaphoricotherwise.Letusconsiderthesentenceextractedfromourcorpus:IthadpreviouslybeenthoughtthatZE-BRA'scapacitytodisruptEBVlatency....NoHCrulerecognizesthesequenceevenbytolerating3unknownwords,butaLCrulematchesitwithordsbetweenthepronounandthedelimiterthat.Amongthesurfaceclues,wecheckedthatthesequenceisatthebeginningofthesentence\nOnlysigni\u00c2\u00aecantsurfacecluesforourmodelisationhavebeenaddedtotheBN.Amongthe2000itoccurencesofourtrainingcor-pus(seenextsection),theHCrulesrecognized649ofthe727non-anaphoricpronounsandtheyhaveer-roneouslyrecognizedasnon-anaphoric17pronouns,sowesettheHCR-rulesnodeprobabilitiesasP(HCR-rules=MatchPronoun=Non-Anaphoric)=89.2%andP(HCR-rules=MatchPronoun=Anaphoric)=1.3%whichexpressestheexpectedvalueforthefalsenegativecasesandthefalsepositivecasesproducedbytheHCrulesrespectively.SowesetP(HC-rules=No-match)=1andP(Unknown-Words=More)=1.WesetP(LC-rules=Match)=1,P(Sequence-Length=four)=1andP(Delimitor=That)=1.Table1:PredictionResults(Accuracy\/FalsePosi-veCases\/FalseNegativesCases)MethodResults\nHighlyConstraintRules88.11%\/12.8\/169.1LightlyConstraintRules88.88%\/123.6\/24.2SupportVectorMachine92.71%\/-\/-NaiveBayesianClassi&#2;er92.58%\/74.1\/19.5BayesanNetwork95.91%\/21.0\/38.2(1)butthatthesentenceisnotthe&#2;rstoftheab-stract(2).Thesentencealsocontainstheadverbpreviously(3)andtheverbthink(4),whichwordsbelongtooursemanticclasses.Thepriorirobabilityforthepronountobenon-anaphoricis36.2%.AftermodifyingtheprobabilitiesofthenodesoftheBNaccordingtothecorpusobser-vations,theaposterioriprobabilitycomputedforthisoccurenceis99.9%andthesystemclassi&#2;esitasnon-anaphoric.4ExperimentsandDiscussionMedlineisadatabasespecializedingenomicre-searcharticles.Weextractedfromit11966ab-stractswithkeywordsbacillussubtilis,transcrip-tionfactors,Human,bloodcells,geneandfu-sion.Amongtheseabstracts,weisolated3347occurencesofthepronounitandtwohumanan-notatorstaggeditoccurencesaseitheranaphoricornon-anaphoric.Afterdiscussion,thetwoan-tatorsachievedatotalagreement.WeimplementedtheHCrules,LCrulesandsurfacecluesusing&#2;nitetransducersandextractedthepronounsyntacticrolefromtheresultsoftheLinkParseranalysisofthecorpus(Aubin,2005).Asaworkingapproximation,weautomati-calygeneratedtheverb,adjectiveandnounclassesfromthetrainingcorpus:amongallitoccurencestaggedasnon-anaphoric,weselectedtheverbs,adjectivesandnounsoccurringbetweenthedelim-iterandthepronoun.Weconsideredathirdofthecorpusfortrainingandtheremainingfortesting.Ourexperimentwasperformedusing20-crossval-idation.Table1summarizestheaverageresultsreached\nOthersnodevaluesaresetconsequently.Corpusisavailableathttp:\/\/www-lipn.univ-paris13.fr\/&#152;weissenbacher\/\n197\nbythestate-of-the-artmethodsdescribedaboveTheBNsystemachievedabetterclassi&#2;cationthanothermethods.Inordertoneutralizeandcomparativelyquan-tifythecontributioninthedecisionofthedepen-dancyrelationshipsbetweenthefactors,wehaveimplementedaNaiveBayesianClassi&#2;er(NBC)whichexploitsthesamepiecesofknowledgeandthesameparametersastheBNbutitdoesnotpro&#2;tfromreinforcementmechanism,whichleadstoariseinthenumberoffalsepositivecases.OurBN,whichhasagoodprecision,never-thelesstagsasnon-anaphoricsomeoccurrenceswhicharenot.Themostrecurrenterrorcorre-spondstothesequencesendingwithadelimitertorecognizedbysomeLCrules.AlthoughnoneHCrulematchesthesequence,itsminimallengthandthefactthatitcontainsparticularadjectivesorverbslikeassumedorshown,makesthiscon-&#2;gurationcaracteristicenoughtotagthepronounasnon-anaphoric.Whenthedelimiteristhat,thisclassi&#2;cationiscorrect10butitisalwaysincorrectenthedelimiteristo11.Forthedelimitertotherulesmustbemorecarefullydesigned.Threedifferentfactorsexplainthefalsenega-tivecases.Firstly,somesequenceswereignoredbecausethedelimiterremainedimplicit12.Sec-ondly,thepresenceofappositionclausesincreasesthesequencelengthanddecreasesthecon&#2;dence.Dedicatedalgorithmstakingadvantageofadeepersyntacticanalysiscouldresolvethesecases.Thelastcauseisthenon-exhaustivenessoftheverb,adjectiveandnounclasses.Itshouldbepossibletoenrichthemautomatically.InourexperimentswehavenoticedthatifaLCrulematchesase-quenceinthe&#2;rstclauseofthe&#2;rstsentenceintheabstractthenthepronounisnon-anaphoric.WecouldautomaticallyextractfromMedlinealargenumberofsuchsentencesandextendourclassesbyselectingtheverbs,adjectivesandnounsoccur-ingbetweenthepronounandthedelimiterinthesesentences.5ConclusionOursystemcanofcoursebeenhancedalongtheeviousaxes.However,itisinterestingtonote\nWehavecompletedtheClement'sSVMscoreforthesamebiologicalcorpustocompareitsresultswithours.10LikeinthesentenceItisassumedthattheSecYproteinofB.subtilishasmultipleroles...11LikeinthesentenceItisassumedtoplayarolein...12ForexampleThus,itappearsT3SO4hasnointrinsic...thatitachievesbetterresultsthanthecomparableate-of-theartsystems,althoughitreliesonthesamesetofrulesandsurfaceclues.Thiscom-parisoncon&#2;rmsthefactthattheBNmodelpro-posesaninterestingwaytocombinethevariousclues,someofthenbeingonlypartiallyreliable.Wearecontinuingourworkandexpecttocon&#2;rmthecontributionofBNtoNLPproblemsonataskwhichismorecomplexthantheclassi&#2;cationofitoccurences:theresolutionofanaphora.ReferencesAubin,A.NazarenkoandC.Nedellec.2005.AdaptingaGeneralParsertoaSublanguagePro-ceedingsoftheInternationalConferenceonRe-centAdvancesinNaturalLanguageProcessing(RANLP'05),1:89&#150;93.L.Clemente,K.SatouandK.Torisawa.2004.Im-provingtheIdenti&#2;cationofNon-anaphoricItUs-ingSupportVectorMachinesActesd'InternationalJointWorkshoponNaturalLanguageProcessinginBiomedicineanditsApplications,1:58&#150;61.I.DaganandA.Itai.1990.AutomaticProcessingofLargeCorporafortheResolutionofAnaphoraReferencesProceedingsofthe13thInternationalConferenceonComputationalLinguistics(COL-ING'90),3:1&#150;3.R.Evans.2001.ApplyingMachineLearningTowardanAutomaticClassi&#2;cationofitLiteraryandlin-guisticcomputing,16:45&#150;57.S.LappinandH.J.Leass.1994.AnAlgorithmforPronominalAnaphoraResolutionComputationalLinguistics,20(4):535&#150;561.C.D.PaiceandG.D.Husk.1987.TowardstheAuto-maticRecognitionofAnaphoricFeaturesinEnglishText:theImpersonalPronounItComputerSpeechandLanguage,2:109&#150;132.L.PeshkinandA.Pfeffer2003.BayesianInformationExtractionNetworkInProc.18thInt.JointConf.Arti&#2;calIntelligence,421&#150;426.D.RothandY.Wen-tau.2002.ProbalisticReasoningforEntityandRelationRecognitionProceedingsofthe19thInternationalConferenceonComputationalLinguistics(COLING'02),1:1&#150;7.\n198\n"},{"title":"Two models for integrating persistence and lazy functional languages","authors":"David J. McNally, \r\n                          Antony J. T. Davie","article":"http:\/\/dl.acm.org\/ft_gateway.cfm?id=122504&ftid=227132&dwn=1","bibtex":"http:\/\/dl.acm.org\/downformats.cfm?id=122504&amp;parent_id=&amp;expformat=bibtex&amp;CFID=745371419&CFTOKEN=41684288","text":"Models For Integrating Persistence and Lazy Functional Languages J. McNally and Antony J. T. Davie Depatunent of Computational Science University of St Andrews Scotland new programming system -- STAPLE (Statically Typed Applicative Persistent Language Environment) -- which integrates a lazy functional programming language and a persistent store is described. The motivation for introducing orthogonal persistence into a functional setting is given. Two models for achieving this integration are then described together with a discussion of the way laziness interacts with persistence and \n43 ACM SIGPLAN Notices, Volume 26, No. 5, May 1991 \nConstructor functions, which create new structured values, are no exception to the above lazy data It is such fields Clearly, to address the and difficult difficult In persistent programming languages, programs may manipulate data values independently of their persistence and need not refer to the persistence of the values they create. This is known as the principle of persistence independence. The principle of data type completeness first class can be understand, but consideration for orthogonal persistence values reachable be no type used persistence in in propose different types for persistent data from those for non-persistent data. For example a persistent integer, known as a database type, has a different type to a non-persistent one. This contradicts both the principle of persistence identification and the principle of persistence independence and is more complicated for the that they deal with with is preserved over persistent store operations - sharing and topology are unaltered. This is particularly important in a functional language setting from an efficiency viewpoint (semantically it should not matter). Languages such as Amber[Card83] and a proposal for persistence in Others such such may result in dangling pointers if a persistent data structure is created which contains non-database types. 1.3.2 Persistence in Functional Programming Systems Functional languages have so far provided little support for storage of long term data. Many attempts do not have the property of orthogonal persistence. In Staple, however, orthogonal persistence is achieved. Most systems which provide anything at all, provide just a simple mechanism for writing and unflatten seriously, partially can they \nsystem has a function which will flatten a data structure (after forcing its total evaluation) to a list of characters, but this is subject to the same criticisms. Some systems (e.g. Poly [Matt88]) attempt to allow the the computation that this interactive evaluations facility to to is a purely functional manipulated. Because Because used by Staple only fetches values from backing store as they are needed (lazily) Staple is able to cope with this application area. In addition, the Staple system benefits from an efficiency point of view since no value is ever computed more than once, regardless of its persistence. 1.4 Two Models for Persistence in Lazy Functional Languages There are many possible approaches to adding persistence to programming languages not all of which yield orthogonal persistence. Two models which do are described below. The first, persistence with modules, is illustrated with two examples - memoising a function and a prototype transportation network system. The second, stream persistence, illustrated with deal with data than is to persistence in transparent way - a are stored. if not print the maintained. That \npartially or wholly evaluated objects should be made to persist so that evaluation of an object will not have to be repeated. The Staple persistent store contains a set of modules each of which can contain a number of definitions. This set of modules is organised into a directory structure within the persistent store and modules can be accessed via their name. A module constitutes the unit of compilation. Any module can be compiled in an environment created by importing the definitions exported by other previously compiled modules. An interactive session can also run in such an environment. The persistent store is ufilised by the use of two commands at the operating system level: \n\u0095 A command to create a module in a persistent store \u0095 A command to allow expressions to be entered and evaluated interacfively using values in the persistent store. The implementation of the Staple module system is described in detail in McNa90. 2.1 Creating a New Module in the Persistent Store The command \n othermodulenames  \na module named into the store by compiling the source file called module imports all definitions from must already be in the persistent store. A module exports all names defined at its own top level of definitions. If exists, this command will overwrite it and any objects defined in the old version will become candidates for garbage collection unless they have been imported by another module in the persistent store. Note, however, that this sytem does not provide an automatic re-binding mechanism. This is totally under user control. If there is a clash of names in are resolved by considering each module as a block in which the previous ones appear as sub-blocks and letting lexical scoping resolve the conflicts. In the current implementation of Staple, this rule means that modules cannot be mutually recursive. All recursion must be expressed within modules where the defined objects can be mutually recursive. In addition, modules do not export any names that they import from elsewhere. In the particularly simple set-up described here, the names declared at the top level of a module (and only those names) are exported by that module. Other models for naming in modules can be used to avoid these problems and further work will be carried out on this. Values in a module may be shared by many other modules as shown in Figure 2. \n2 Figure 3 shows the result of recompiling module B. The association in the module directory is replaced with a reference to the new module. The values in the old module which are not referenced may then be garbage collected. Values shared by other modules, however, are not lost. Directory \"A\" module ~ \"B\" ~ ( ~ ~ Garbage \\  New I \/ collection \/ this 3 \nInteracting with the Persistent Store command   the user to evaluate expressions interactively, in an environment defined by enames must be in the persistent store. Expressions evaluated during the interactive session may cause the partial or total evaluation of objects defined in the environment being used. This evaluation will be reflected in a permanent (referentially transparen0 change in state of the persistent store. Partially computed values are represented as suspensions - a suspension consists of some code and an environment such that the code when evaluated in the given environment yields a value in head normal form. When the value of such an object is required, the code is executed and the resulting value overwrites the suspension in place. All values which shared the suspension will then see the result of this evaluation. This overwriting in place is not an update in the imperative sense since the value is not being replaced by another different value, but is being replaced by a different representation of the same value which is closer to normal form (being completely evaluated). Two Examples of functional programming with Modules examples of modular persistent functional programming will now be described. The first is a small one to illustrate the principles involved and the second describes how a prototype of a large application was built. 2.3.1 Prime Sieve of Eratosthenes method of calculating prime numbers can be extended, see for instance Turn82, to allow the specification of an infinite list of primes to be defined in a very expressive way: = sieve(from 2) sieve (p:x) = p:sieve n In x , n mod p &#x- 00; O the from function is in the 'standard prelude' module and specifies an infinite list of the integers starting from 2. The s ieve function removes all multiples of the first element of a list from the rest of the Hst. Although this is an attractive definition because of its conciseness, it does require work to calculate any given prime, but these are evaluated lazily and on demand only. To compile this module (named prime say), the command prime prelude used. The argument prelude is needed to enable the from function from the precompiled to be used. Subsequent uses of the primes list can then be made either interacfively by prime ... other modules to be used ... in another module by mymodule prime ... other modules ... evaluation of sections of the p rime s list using either of these methods will be retained in the persistent store and subsequent users of the module will benefit. Some evaluation can be performed on the list of primes by asking, for example, for the 25th prime number as follows ! 25 ? ? indicates the end of an expression to be evaluated. The evaluation required to evaluate the above expression involves 1050 function applications. If, at some later time, the 20th element in the list is requested !20 ? 42 function applications (associated with the list indexing operator ! ) are needed. However, if the 30th prime number was required !30 ? some further work would be required (445 more applications in fact) whereas it would have taken 14.43 applications if started from a completely unevaluated state. The use of an array rather than a list would give significant benefit. Before any evaluation takes place, the value associated with primes is a suspension as shown in Figure 4. \n47 \nI suspension s ~ infinite list 1 3 ~ evaluates infinite list p r 5.rae s reachable from already carried on later been used model of of including subways, trains, buses and pedestrians. It covers 110 stations including many which lie on more them over &#149; a The raw about these pre-calculate the referential integrity whole of to be be and Napier88[Morr89], but which preserves referential integrity and is orthogonal. These \ninteractive environment. Requests are typically things like \"display the string 'hello world' on the standard output\" or \"read or \"the I ~ ~ i- Responses ] System I Figure 6 Staple requests and responses are defined as an algebraic data type which is part of the standard environment. 3.2 Dynamic Typing If arbitrary values are to be stored in the persistent store by requests at run-time and later retrieved, there needs universal type language which coerce expression : : s s to be be Staple adopts the restriction restriction due to Mycroft which states that only closed types (those involving no unquantified type variables) may be associated with a value by the injection operation. The reason a restriction is necessary is that the type rules can be broken without one. While this restriction is sufficient to preserve type safety, it reachable from persistence. Staple the request data type Insert Name Any Lookup Name Delete Name data type data Response Db Any type safety that only \nof type Any can be associated in the persistent store and by the type check performed dynamically by a Delete request simply removes the association between the string and the value, not the value itself which may be shared by some other object. If it is not referenced by any other persistent object, it will be garbage collected. Initiating Evaluation Staple expression entered interactively which is inferred to have the type Response  &#x0000;-- Request  is treated specially by the system. A function of this type is called a evaluate a dialogue function, the Staple system transforms the expression into an application of the dialogue function to a system generated list of responses. This list of responses is completed lazily as a consequence of the evaluation of the list of requests which is now the result of the transformed expression. The list of requests is interpreted by the system rather than just displayed as is the case with ordinary expressions. The laziness deals with the synchronisation of requests and responsesThom86. A Functional Index demonstrate how Staple can be used to implement database style applications, this section describes an example of the use of Staple to implement a simple database of employee records. Staple is being used,here, as a database programming language. Tuple = Employee Char Int Char Int defines the type used to represent records in the database. Now we define an database which is empty - lists of records are used to represent the database. : : Tuple emptydb =   empty database is the empty list. Next a function is defined which will initialise an empty database in the persistent store. = \"employee database\" initdb resps = Insert dbname (mkany emptydb) can be executed by typing ? the staple interactive session prompt. Since this is a dialogue function, it is treated specially and applied to a list of responses. The responses are generated according to the list on the right hand side of this function definition. In this case, the single response (which is not accessed) is an indication of success. Next a function which will insert a new tuple into the database is defined. n a nis resps = Lookup dbname, Insert dbname newdb where newdb = mkany ( newtuple : db) newtuple = Employee n a nis db = coerce stored :: Tuple stored = getval (resps!0) getval (Db val) = val getval (Failure mess) = error mess addtuple defined above produces a dialogue if it is applied to four arguments. This dialogue results in two requests - one to lookup the database in the persistent store and one to insert the new updated database into the persistent store. The subsidiary definitions extract the old database from the dynamic object returned as the first response and construct a new database by appending a new tuple onto the old database. The contents of the database can be displayed using the following function resps = Lookup dbname, AppendChan \"stdout\" (showdb db)  whe re db = coerce stored :: Tuple stored = getval (resps!0) getval (Db val) = val getval (Failure mess) = error mess \n\"Employee database database = [] showtups (h:t) = showtup h ++ showtups n a number Salary'n\" ljustify 20 ni ++ (intTOstring s)++\"'n\" [Lookup dbname, coerce stored : : : stored = getval (resps!0) getval (Db val) = val getval (Failure mess) = error mess remtuple name name = [] remtuple name = h : remtuple name n a b b dbname,Insert dbname coerce stored stored stored = getval (resps!0) getval (Db val) = val getval (Failure mess) = error mess the add n a nis resps n a database operations by avoiding described two created objects persistence. Referential \nwhich underlies Staple and to our colleagues at St Andrews for their valuable comments. References [Abad89] Abadi, M., Cardelli, L., Pierce, B. & Plotkin, G.D., Typing in a Statically DEC Systems Report 47, 47, Atkinson, M., Bailey, P., Chisholm, K.J, Cockshott, W.P. & Morrison, R., An Approach Journal, Vol. 26, No. 1983, pp.360-365. pp.360-365. Barendregt, H., (Revised Edn.), North Holland, Holland, Brown, A.L., Object Stores, Ph.D. Thesis, Andrews Dept. Comp. Sci. Glasgow Dept. Persistent Programming Research Report Report CardeUi, L., Bell Labs Report, 1983 1983 Darlington, J. et al., A Vol. 365, 1989, 1989, Davie, A.J.T. and McNally, D.J., Statically Typed Applicative Persistent Language Environment (STAPLE) Reference Manual, Andrews, Dept. Comp. Sci., Report CS\/90\/14, 1990 1990 Friedman, D.P and Wise, D.S., Eds. Michaelson & Milner, Edinburgh Univ. Press, 1976, pp257-284 pp257-284 Henderson, P. and Morris, J.H., A Lazy Evaluator, Proc. 3rd Annual ACM Symposium on Principles of Programming Languages, Atlanta, 1976, pp95-103 pp95-103 Hornick, M.F. and Zdonik, Oriented Database, Information Systems, Vol. 5, No. 1987, pp. 70-95 [Huda90] Hudak, Hudak, Hughes, J., Functional Programming Matters, Journal, Vol. 32, No. 2, April 1989 1989 Joosten, S. Ph.D. Thesis, Thesis, Joosten, S. Ruppert, W., (ESPRIT 891) Six Six Matthews, D.C.J., Eds. Atkinson, M.P., Buneman, Springer-Velag, 1988 1988 McNally, D.J., Joosten, S. and Davie, A.J.T., Persistent Object Systems, Martha's Vineyard, Mass, 22-27 Sept 1990, pp59-70 pp59-70 Milner, R., A Theory of Type Polymorphism in Programming, J. Comp. Sys. Sciences, Vol. Vol. Morrison, R., Brown, A., Connor, R.C.H., Dept. Comp. Sci. Glasgow Dept. Computing, Persistent Research Report PPRR- 77-89, 1989 1989 Morrison, R. Atkinson, M.P., Workshop, pp9-28, Springer-Verlag, 1990 1990 Peyton Jones, S. S. Richardson, J.E. the E Practice and Experience, Vol. Vol. Thompson, S., Writing Interactive Programs in Miranda, University of Kent at Canterbury Computing Lab. Report 40, 1986 [Turn79] Turner, D. A., SASL Language Comp. Sci., Report CS\/79\/3, D. A., Semantic Elegance Proc. FPCA Publications, 1981, pp. 85-92 85-92 Turner, D. Recursion Equations Functional Programming Darlington, J., Henderson, 1982, pp. 1-28 1-28 Turner, D. A., Miranda: A Non-Strict Functional Language with Polymorhic Types, Proc. FPCA Conference, Nancy, Notes in Computer Science 201, 1985, pp. 1-16 \n"}]